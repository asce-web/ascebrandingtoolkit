%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: ASCE_LH_addressblock.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Katie Linnell
%%CreationDate: 3/8/11
%%BoundingBox: 0 0 147 121
%%HiResBoundingBox: 0 0 146.1689 120.6436
%%CropBox: 0 0 146.1689 120.6436
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 108 8%%BeginData: 15618 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD10FFAFA9AFA8FFA9AFA8FFA9FD15FFA87E30300D300D302F5A5A%A9A9FD13FF7E7E2F300D300D302F5A7EA9FFFFFFAFA8FFA9AFA8FFA9AFA8%FFA9AFA8FFA9AFA8FFA9FD1DFF5A070E070D070E070D0730A8FD12FFA92F%0D070D070D070E070D072F072F2F85FD0EFF7E5A070D070E070D070E070D%072F073054FF0D0D070E070D070E070D070E070D070E070D072F54FD1CFF%0D3007300D0E07300D0E077EFD11FF7E07300D0E0D300D0E0D300D0E0D30%0D2F07307EFD0AFFA92F3007300D0E0D300D0E0D300D0E0D300730AF300D%0E07300D0E07300D0E07300D0E07300D0E075AFD1BFF5A0D070D070D070D%070D070D2FFD10FF5A070D070D070D070D070D070D070D070D070D075AFD%08FFA95A070D070D070D070D070D070D070D070D070D84FF070D070D070D%070D070D070D070D070D070D070D53FD1BFF5A0D0E0D300D0E0D300D0E0D%3084FD0EFF7E0D0E0D300D0E0D300D0E0D300D0E0D300D0E0D30A9FD07FF%A93007300D0E0D300D0E0D300D0E0D300D0E0D3054FFFF300D0E0D300D0E%0D300D0E0D300D0E0D300D0E077EFD1AFFA9070E070D070E070D070E070D%075AFD0DFFA9070E070D070E070D070E070D070E070D070E070D54FD07FF%A830070D070E070D070E070D070E070D070E070D07A9FFFF070E070D070E%070D070E070D070E070D070E070D53FD1AFF5A2F0D300D0E0D300D0E0D30%0D0E0DFD0DFF30300D300D0E0D300D0E0D300D2F07300D0E0D300DFD07FF%A93007300D0E0D300D0E0D300D0E0D300D0E0D300D5AFFFFFF3007300D0E%0D300D0E0D300D0E0D300D0E0D300D5AFD19FFA830070D070D070D070D07%0D070D070D5AFD0BFFA80D070D070D070D070D070D2F5A5354070D070D07%7EFD06FFA930070D070D070D070D070D070D070D070D070D070DA8FFFFFF%070D070D070D070D070D070D070D070D070D072F53FD19FF850D0E0D300D%0E0D300D0E0D300D0E075AFD0BFF850D0E0D300D0E0D300D307EFD05FF7E%300730FD07FF7E0D0E0D300D0E0D300D0E0D300D0E2F5A2F300D305AFD04%FF300D300D0E0D300D302F7E5A5A545A5A5A545A5485FD19FF2F0D070D07%0E070D070E070D070E070D07A9FD0AFF532F070D070E070D070E7EFD08FF%5A5AFD06FFA9070E070D070E070D070E070D2F7EA8FFA9FFA9A95AFD05FF%0D0D070E070D070E077EFD23FFA80E07300D0E0D300D0E0D300D0E0D300D%2F5AFD0AFF5A07300D0E0D300D0E0DFD11FF542F0D300D0E0D300D0E0730%7EFD0DFFAF300D0E0D300D0E0D307EFD23FF5A070D070D070D070D0D0D07%0D070D070D072FA8FD09FF2F0D070D070D070D070D7EFD0FFFA80D070D07%0D070D070D070D84FD0FFF070D070D070D070D077EFD23FF0D300D300D0E%0D300D852F300D0E0D300D0E07A9FD09FF5A0D300D0E0D300D0E0D3084FD%0EFF7E0D0E0D300D0E0D300D307EFD10FF300D0E0D300D0E0D307EFD22FF%5A2F070D070E070D0730FF5A070E070D070E070D2FFD09FF2F0D070E070D%070E070D070D2F7EA8FD0BFF2F0D070D070E070D072F54FD11FF070E070D%070E070D077EFD22FF5407300D0E0D300D2F54FF843007300D0E0D300D0E%A8FD08FF7E0D0E0D300D0E0D300D0E0D300D0E2F7EA8FD07FFA90E07300D%0E0D300D0E0DFD12FF3007300D0E0D300D0E2F7E5A5A545A5A5A545A5AFD%17FFA9070D070D070D070D0784FFFF0D0D070D070D070D077EFD08FF7E0D%070D070D070D070D070D070D070D070D2F7EA8FD04FFA9070D070D070D07%0D0754FD12FF070D070D070D070D070D070D070D070D070D070DA9FD16FF%5A300D300D0E0D300D30AFFFFF7E07300D0E0D300D302FFD09FF2F300D30%0D0E0D300D0E0D300D0E0D300D3007307EFFFFFF7E300D300D0E0D300D30%5AFD12FF300D300D0E0D300D0E0D300D0E0D300D0E0D300DFD16FFA83007%0D070E070D072F53FFFFFF7E0D070E070D070E070D7EFD08FFA9070D070E%070D070E070D070E070D070E070D072F54FFFF7E070D070E070D070E077E%FD12FF0D0D070E070D070E070D070E070D070E070D0730A9FD15FF7E0730%0D0E0D300D0E07A9FD04FF2F0E0D300D0E0D300D5AFD09FFA90D2F07300D%0E0D300D0E0D300D0E0D300D0E07305AFF5A300D0E0D300D0E0D307EFD11%FFAF300D0E0D300D0E0D300D0E0D300D0E0D300D0E0DFD16FF2F0D070D07%0D070D070DA8FD04FF5A070D070D070D070D07A9FD09FFA92F0D070D070D%070D070D070D070D070D070D070DA87E070D070D070D070D077EFD12FF07%0D070D070D070D070D070D070D070D070D070DA8FD14FFA95A54FD047E85%7E7E7EFD05FF843007300D300D300D307EFD0BFF845A2F3007300D0E0D30%0D0E0D300D0E0D300D5A7E300D0E0D300D0E0D305AFD12FF300D0E0D300D%0E0D300D0E0D300D0E0D300D300DFD20FFA9FD05FFA88453540D0D070E07%30FD0EFF7E5A2F0E070D070E070D070E070D070E0D7E070E070D070E070D%075AFD12FF070E070D070E070D070E070D070D070D070D070DA8FD10FFA9%FF847E5A5A305A2F302F302F542F302F302F5A547E7E857E8530300D300D%A9FD10FFA87E2F2F0D300D0E0D300D0E07307E3007300D0E0D300D0E0DFD%12FF3007300D0E0D300D3054A984A97EA984A97EA984FD0EFFA87E545A2F%5A535A547E7E847EA97E847EA97E7E5A5A2F30070D070D070D070D070D53%FD13FF530D070D070D070D070D077E2F0D070D070D070D070D2FFD11FF07%0D070D070D070D077EFD19FFA8AFFD0BFFAFA9FFA9FFA9FD05FFA9A95A5A%0D0E0D300D30AFFD13FF2F300D0E0D300D0E0D30847E07300D0E0D300D0E%0D307EFD10FF300D300D0E0D300D305AFD1CFFA8A97E5A2F542F3007300D%0D070E070D072F070D2F5A547E5A5A070D070E077EFD06FFA8A9FD0BFF7E%070E070D070E070D07A9A80D070E070D070E070D070E7EFD0FFF0D0D070E%070D070E077EFD19FFA87E545A547E5A7E7EA9A8A9A8FFA8A9A8A97E847E%7E54300D30072F07300D0E0D3030FD06FF300DA9FD0AFF5A2F0D300D0E0D%300D0E84FF30300D300D0E0D300D0E07305AFD0DFFAF300D0E0D300D0E0D%307EFD19FFA97EFD0BFFA8FFA8A984A9A8A97EA9A8A97E7E5330070D070D%070DA8FD04FF7E070D075AA8FD07FF840E070D070D070D070D07A9FFA907%0D070D070D070D070D070D0D5A7EA9A8A9847E2FA9FD04FF070D070D070D%070D077EFFFFA9FFFFFFA9FFFFFFA9FD12FFA9A97E7E545A2F300D300D30%0730073007300D300D30545A5A5A0D0E0D300D7EFD04FF2F300D0E07305A%A9A9FFFFAF7E300D0E0D300D0E0D300D54FFFFFF7E07300D0E0D300D0E0D%300D3007300D300D300D302FFD04FF300D0E0D300D0E0D302F542F5A2F54%2F5A2F542F7EFD0FFF5A5A2F2F070D070D070D070D2F5A545A547E5A7E54%7E5354072F070D070E070D070D2FFFFFFF5A0D070E070D072F070D0D300D%0D070E070D070E070D072F5AFD04FF30070E070D070E070D070E070D070E%070D070E070D7EFFFFFF070E070D070E070D070E070D070D070D070D072F%53FD0FFFA97E300D0E07300D0E0D300DFD0DFF2F300D0E0D300D0E0D307E%FFA9300D0E0D300D0E0D300D0E07300D0E0D300D0E0D300D0E0DFD05FFA9%3007300D0E0D300D0E0D300D0E0D300D0E0D300D54FFFFFF3007300D0E0D%300D0E0D300D0E0D300D0E0D300D5AFD10FF7E070D070D070D070D075AFD%0DFF84070D070D070D070D075AFF5A070D070D070D070D070D070D070D07%0D070D070D070D077EFD06FFA830070D070D070D070D070D070D070D070D%070D077EFFFF070D070D070D070D070D070D070D070D070D070D53FD10FF%2F300D0E0D300D0E0D30A9FD0EFF300D0E0D300D0E0D300DA90D300D0E0D%300D0E0D300D0E0D300D0E0D300D0E0D300D5AFD09FF5A0D300D300D0E0D%300D0E0D300D0E0D300D302FFFFF300D300D0E0D300D0E0D300D0E0D300D%0E0D300D7EFD0FFF7E0D070E070D070E070D2FFD0FFF532F070D070E070D%072F5AA80D2F070D070E070D070E070D070E070D070E070D075AFD0BFF7E%0D0D070E070D070E070D070E070D070E070D7EFF0D0D070E070D070E070D%070E070D070E070D072F54FD0FFF5A073007300D3007300785FD0FFFA907%300D3007300D300730FFFF5A300D3007300D0E0D300D0E0D300D0E07300D%7EFD0EFF5A0E07300D0E0D300D0E0D300D0E0D300730A8300D3007300D30%07300D3007300D3007300D30075AFD0EFFA92F302F302F302F302F54A9FD%10FF540D302F302F302F300DA9FFFFA87E2F0D070D070D070D070D070D07%3053FD11FFA85A2F0D070D070D070D070D070D07545AFF2F302F302F302F%302F302F302F302F302F302F2F54FD3AFFA9A95A5A2F5A2F5A2F5A7EA9FD%16FFA984545A30302F5A547E84FD58FFA9FD21FFA9FDB3FFA9FD79FFAF7E%FFA985FFFFA9A9A8857EA97E85A9AFA9A95A85FFFF7EFFFF85FFFF84FFFF%A95A85FFA95AA9FFA95AA9A9AF84857EA97E857EFFFFA9A9FFA87E7EFF7E%8584FFFF855AA9A8A9A9FFFD04A9AFFFFFFF7E85A885A9FFA8FF7E7E84FF%A8A984FFA8FF7E7EA8A97EA984857EFFA87E7EFD10FF5A30FFA92FFFFF5A%54847EFF7E7EA87E7E7E54AF54A9A830A8FF0784A95AFFFF53FF548454FF%53A954A9537E7E7E84FFA95A7EA95AFF53FFFF5AA87E7E5A84FFFFA854A9%5A7E537EFF7E537E5AA9FFFF7E5AA9FF2F7EFF7E7E7EA87E7E7E5A30FF7E%7E5AA9FF53A9FF7E7E845A7EA87E84FD0FFF7E5AA9A85A84FF54857EA9FF%A97EA97E857E7EFFFFFF845A85FF5A54FF5AFFFF7E84FF7E85FF855485FF%FF7E857EA9A9FF7EA9FF7E54A9FFFF5AFFA87E7EA9FFFF7EA9FFFF7EA95A%FF5AA97E7EA9FFFFA95AFFA97E54A97E7E84FFFFA97EA953A97E845AFFFF%7EA8FF7E857E857E84FD10FFA954A95AA95A7E847E7E8454847E5A537E7E%7E5AFFFFFF54A953A95A7E547EFFFFA85A7E847EFF7E5A5AFFFF847E7E5A%84FF7E7EFF7E54FFFFA87EFFA95A7E5AA9FF7E7EFFFF7E847E7E7E847E5A%A9FFFF7E5A7EA95A7E547E5A84FD057E84537E7E5A5AA9547E847E53547E%FF545AFD0FFF7E5A7E5A7EA97E5A84A97EAFFFA97EFF5A857E7EFFA97E5A%7E5A847EA95A5AFFA9A9FF7E5A85FF855A85FFA97EA97EFFFFFF7EA9FFFF%5AFFFFFF5AFFA87E7EFFFFFF7EA9FFA95AA9845A84A97E7FAFFFFFA97EFF%FF7EFF5A5A8584FF5AA97E85A98530A95AFFFF7EFFFF7EA9A87EA9FF5AA9%FD0EFF5AA8FF5A5AA8842FFF7E845AA95A84FF7E5AA95A7E535A7EFF7E5A%5AFF535AFFFF538454A9537E54A9537E54FD047EA8FF7E7EFFA87EFFFFFF%7E5A5A7E7EA9FFFFA9537E547E84FF0DFF847E5A7EA8FF845A7EA954FF5A%54845A7E5A7E847EAFA8307E5A7EA9547E847EA8A95A7E7E5A84FD0EFFA9%FFFFFFA9FFA9FFFFFFA9A984A9A9FFA9FFAFFF7EA9A9FFFFFFA8FFFFFFA8%FFFFFF7EA9FFA97EAFFFFF7EFFFFFFA8A984FFA9FFFFFFA8FFFFFFA98584%FFA8FD04FFA97EFFA9FFFFA9FFFFA9AF7EA9FFFF84A9A9FFFFFFA9FFA885%A9FFA9FFFFFFA8FFA8A9A8AF7EA9A8FFFFFFA985A8FDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDA7FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FDFCFFFD%FCFFFDFCFFFDFCFFFDA5FFAFFD0DFFA8FD0DFFA8FFA8FD4EFF7DFFFFA87D%FFA884A8FF7DA8FD04FFA8FF7DFD0EFF84A9FD06FFA87DA8FFFFFFA87DA8%FFFFA87DA8FFFFFFA8FD07FFA8A87DFD11FFA8A8FFA8A8A8FD04FF7DA8FF%A87DFFA884FFFF7DA8FF84A8FFFFFFA8A8FFA87DFFA87DA8FF7DA8FFFFA8%A8FF7DA87D7EA87EA8A87DFFFFFF7D7DFF7DFD0EFF7DFD07FF7DA87DFFFF%FFA8A87EFFFFA8A87DA8FFA8FD08FFA87DA87EFD05FFA8A8FD0AFF7DFF7D%A852FFFFFF7DA87DA87DA87DFF7DFF7DA87DAFA8A8FFFFFF7D7DA8A8A87E%A8A87E7DA87DA8FF7DA8FFA8A8A87DFF7DFFA8A8FFFFFFA87DFF7DFF7DFF%A8FFA8FF7DFD04A8FF7D7DFFA8A8FF7EFFFFA8A8A8FFA8A8A87DA8FFFF7D%FFA8A884A8A8FFA8AFA8A8FFFFA8A87EA8A8A8FFA8A87E7DFF7DFFA8A8A8%FD04FFFD04A87DA8FD04FFA87DA8FFA8FFA8A8A8FFA8A8FFA8FFFFFF7DA8%FFFF7EA97DA87DFFFFA8A8FFA87EFF7D7D7E84FFA884FF7DFFFFFF7D7E84%A87D847DA87DA87DA87D7E7DA87D847DA87D7E7D7EFFFF7D7D7DA87DA87D%847DFFFF7EA8A87D7D7D7E7DA87DA87DA8FFA8527DA87E7D7D59AF7D7E7D%A87D7E7D84FD04FF7D7E7DA87DA8FD04FF7DA8A8FF7DFF7DAFA87D7DFFA8%A8A8FF7D7E7EFF7D7DAFA852A8FFFF7DFFFF7EFFFD04A87DFF7EAFA8A8FF%FFFFA87DA884A87DA8FF7DA8A8FFA87DFFFD04A87D7E7DA8A8FFFFA8A8A8%7DA87EA87DA8FFFF7DFFA8A8A8FFA8A87DA87DA8A8FFA87DA8FF7DFD05A8%7EA8FFA87DFF84FD04FFA87DFF84A87DFFFFFF7DFFA8A8FFA8FFA8A8FFA8%7EFFFFA8A87E847DA8FFFFA8A87DFF7DFF7EA8FFFFA8A8A87DFF7DA8FF7E%A8FF7DFFFFA87D7D7DA87DA87EFF59A87DFF7DA8A8A87DA87D847EA87DA8%FFFF7DFF7D7D7DA87D7E7DFFFF7EA8A87DA8A8A87D7D84A8A8A8FFA87D7E%FD05A87D7DA87DFF7D84A8A8FD04FFA87DA87D7D7DA8FFA87DFFA87DFF7D%FF7DA8FFA87EFFA8A8FFFFA8A87DA8A8A87D7EFF7EA87DFFFFFF84A8FFA8%7DA8A87D7DFFA8A8FFFF7EA8FF7D7DA87DA87DA87EA87DA8A8FFA8A87D7E%A87E7DA8A8FFFFA87DA8A87D7DA87EA8FFFF7E7D7DFF84A9A8A87DFF7D7D%A8FFFD04A87D7DA8A87DA8A8A87DA8A8FF7EFFA8FFFFFF7DFF7DFF7DFFFF%A87DA8A8A87DA8FFA8A8FF7DFFFFFF7EFFFFFFA8A8A87D7DFF7E7D7EA87D%A8A8FFFFA8FFA8A8FFFFA8FFFFFFA8FFFFFFA8FFA8FFFFA9A8FFFFFFA8A8%A8FFFFFFA8AFA8FFA8FD05FFA8A8A8FFA8FFA8FFA8FFFFFFA8FFA9FFFFFF%A8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFFFA8A8FFFFFF7DA8FD08FFAF%FFA8FFA8FFA8A8FFFFA8FD0BFFA8FFA8A8FFFFA8FFA8FFA8FDFCFFFDFCFF%FD8AFFA8A8FF7DFFFFA8A8FFA8A8A8FF7DFFFFFFA8A8A8FD05FF7DA9FFFF%FFA87EFFA8A8A8FFA8A8A8FF84A8FD0AFFA8FFFFA9FD09FFA8A8A884FFFF%A8A8FFFD04A884FFFFFFA8A8FFFF7EA8FFFF84A8FD04FFA8FFA8A8A8FFA8%A8A9FF7EA8FD13FF7DFF7DA87DFF7DA8A8A87DA8FFA8A8FFFFA87DFFFFFF%53FFA8847DFFFFAF7DA8A8FF7E7DA87D7DA8A87E7DA8FD07FFA87DA8FFA8%7DFD09FF7DFFA87D84A87D7EA8A87DA8FFA8FFFFA87D7DA8A8A87DFF7EA8%A8FFFFFFA8A8FFA87D84A8A87DA8A8A87DFFFFFFA8FD05FF7DFD08FFA8A8%FF7DA8A87DA8A8A87DFF7DFF84A8FFFF7DFFFFFF7D7DA8A8A87EA8FFFD04%A8FFFF7DFFA8FF7DFFFFA87DFFFFFF7DFFFFFF7D7EA8FF7DFD09FF7EA8FF%FF7DA97DFF7EA8A8FF7DFF7DFFFFA8A8FF7D84FD05A8FD04FF7EA8FFA8FF%7DA87DFF7D7EA8A87DFFFFFFA8FFFFA87E84A8FD07FFA9A8FF7D7DA8A8A8%FF7DA8FFA8A8FFA8FFFF7E7DFFFFA87DFFA87D7DFD04FFA8A8FF7EA8FFFF%A8A8FFA87DFFFFFF7E7EA884A8A87DFFA87D7EA8A8A8A9A87DFFFFA8A8FF%FF7EFFA8FFA8A8FF7DA8FFA8A8FFFFFF7EA8A8A87DFF7D7EA8FFFFFF7DA8%FFFF7DA8A8A8FFA87DFFA8A8FFFFA8A87DA87D7D7DFD08FFA8A8FF7E7EA8%7DA8A8A87DFF7DA8A8A8FFFFA8A87DA87D7DA8A8847EA8FFFFFF7DFFFF7D%A8FFFF7DA8FFAF7DA8FFFFA87DA87E7E7DA8FFFF7DA87D7D7D847D7DA8FF%7EA8FFA87DFF7DFF84A8FFA87DFF7DAFFFFFA87DFFFF7D7DFFFFA87EFFFF%7D7E7DA8FFA87DA8A8FF7D84A8A884FFFFA87DA87DA87DA8FD09FF7EFF7D%FF7DA8A8FF7DA8FFFD04A8FD04FFA8A8A87DA87DFF7EA9FFFF7EA8FFFF7D%FFFFFF7DFFA8FFA8A8FFFFA8A8A8FF7DA87EFFFD04A87DA87DA884FFFFA8%A8FF7DA9FFA8FFA884FFFFA8FFA8A8FFFFA8A8FFFFA87DFFFFFF7DFFFFA8%A8A97EFFFFA884A8FFA87DFFA8A8FFFF7DA8A8A884A8A8FD09FF7EA87D7D%7EA87E7DA87DA87DFF7DFFFFFF7EA87DFFFF7DA87E7D7DA8A8A87DA8FF7D%A8FFFF7DA8A8A87D847DFFFFA87D7D7DA87DA8FFA87DA8A87E7DA87DA8FF%FFA87EA87DA8FF7D7E7DA87DA87DA97DFFFFFF59A8A8FF7DA8FFA87D7DA8%FF847E7DA87DA87DFF7D7E7DA87D7DA8FFA87D7DA87DA87DA8FD09FFA8FF%A8A8A8FFA8A8FFFF7DFFA9FD04FFA87DFFFFFFA8FFA8A8A8FFA8FFA8A8A8%FFA9FFFFA8A8A8FFA87EFFFFFFA8FF7EFFFFA9A8FFA8FFA8FFA8A8FFA8A8%FFFFFFA8FFA8FFFFFF7DA8FFFF7DFFA8FD04FFA87EFFFFA8FFFFA8A8FFFF%A8FF7EA8FFFF7DFFFFA87DFFFFA8A8FFFFFFA8FFA9FFA8FDFCFFFDFCFFFD%93FFA8FD09FFA8FFA8A9FD04FFA8FD0FFFA9FFFFFFA8FD59FF7DA8A87D7E%A87D7DFF7D7D7DFF7DFFFFFF7D7D7EFF7D7DA8A87DA8FD04FF7DFF847D7D%FF7D7D7EFF7D7DA8FFFFFF7DA8FD1EFFA8A8FFA87DA8A97D7DA87DA8FD25%FF7DFFFFA884A8A8A87EA8FF84FFA8A8FFFFA8FFA884A9A8A8A8A9FD04FF%A8A8FFA8FFA8A8A8FFA8A8FFA8A8FFFFA8A8FD1FFFA87DFF7DFFFFA87EFF%A8A8FD25FFA8A8FFFF7DFF7DA8A8A8FFA87DFFA8A8FD04FF7DA87DA884A8%7DFD04FF7DA8FFFFA87DFFFFA87DFFA87DA8FFFFA87DFF7EA9A8FFA8FFFF%A87DA87DFFFFFFA8A884A8A87DA8A8A87DFD05A8FF7D7DA87DA8FF7DA8FF%A87DFFFFFFA87D84A87DA87D7EFD1AFFA8A8FFA87EFFA8A8FF7DFF7DA8FF%A8A8FFFFFF7DA9FF847DFFA8A87DFFFFFF7D7EA8FF7D7EFFFF7DA8FFA87D%FFFFFF7DA87DA87EA87DFFFFFF7D7D7D7EFD04FF7E847DA87DA87DA87DA8%7DA87DFFFFA87EFFA87DA8A8A8FFA87D7DFFFFA8A8A87DA87DAF7DFD1AFF%A8A8FFA87DFF7DA8A8A8FFFF7DFF7EA8FFFFA87DFFFFA87DA8FFFF7DA8FF%84A8A8A8FFFF7DA8FFFF7DFFFFA87DFFFFA87DA8A8A87DA8FFFFFFA87D7D%7DFD04FFA87D7D7DA87D7D7DA87D7D7DA8FFFF7D7D7EFFA87D7DA8FFA97D%FFFFFF7DFF7D7EA87EA8A8A8FD1AFF7DFF7DAFFFFD07A8A9A8A8FFFFA87E%FFFFA87DFFFFFF7DFFFFA87DFFFD0CA8FFFF7DFD04A87DA8FFFFFF7E7D7D%A8FD04FF7E7E7DA8FF7D7E7DFF847D7EA8FFA87E7DA8A8FF7DA87DFFA8A8%FFFFFFA8A8A87EA97DFF7DFD1BFFFD04A8FFAF7D7DFFA87D7DFF7DFFFFFF%7D7E7EFF7DFFFFA87DA8A8A8FF7D7DFFA87D7DFF7D7D84FF7D7DA8FFFFA8%A87E7DA8A8A8FFFFFFA87D7E7DFD04FFA884A8A8FF7DA87DFF7EA87DFFA8%A8A8FF7D7E7DA8FF7D7DA87DFD04A87D7DA8A8A87D7DFD7DFF7EA87DFD7D%FFA87DA8FD19FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (PANTONE Cool Gray 8 C)
%%+ (PANTONE 286 C)
%%CMYKCustomColor: 0 0.0100 0 0.4300 (PANTONE Cool Gray 8 C)
%%+ 1 0.6600 0 0.0200 (PANTONE 286 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                    
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2011-03-08T10:56:34-05:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:ModifyDate>2011-03-08T10:56:35-05:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>212</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA1AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqw782POD+VfJ&#xA;d3fW8np6hPS1sG2JEslfjAP8iBm+jM3QafxcoB5cy4usz+FjJ69Hzl/yuP8AMz/q/Tf8BF/zRnSf&#xA;ydg/mvPfyjn/AJ33O/5XH+Zn/V+m/wCAi/5ox/k7B/NX+Uc/877npH5G/mnr+r+ZZ9F8w37Xhu4S&#xA;9g8gQFZYasyDiF+0lT/sc1naehhCAlAVXN2PZ2tnOZjM33Pds0LunYq7FUHrGsabo2mz6lqc621l&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2011-03-08T10:56:35-05:00</xmp:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>QuarkXPress(R) 8.02</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:XPressPrivate>%%DocumentProcessColors: Cyan Magenta Yellow Black&#xA;%%EndComments</pdfx:XPressPrivate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Layout 1</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2.203708</stDim:w>
            <stDim:h>1.879625</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE Cool Gray 8 C</rdf:li>
               <rdf:li>PANTONE 286 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 286 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>66.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>2.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE Cool Gray 8 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>1.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>43.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:0AC4B875782A681197A5C70D090049DD</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0AC4B875782A681197A5C70D090049DD</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:0AC4B875782A681197A5C70D090049DD</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0AC4B875782A681197A5C70D090049DD</stEvt:instanceID>
                  <stEvt:when>2011-03-08T10:56:35-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -120.644 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 120.644 li
146.169 120.644 li
146.169 0 li
cp
clp
[1 0 0 1 0 0 ]ct
2.45605 88.6045 mo
1.77637 88.6045 li
1.77637 81.728 li
.787109 81.728 li
.9375 81.0688 li
2.45605 81.0688 li
2.45605 88.6045 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.23 .17 .13 .41 cmyk
f
6.79688 82.8574 mo
6.79688 82.3281 6.66699 81.6084 5.9873 81.6084 cv
5.34766 81.6084 5.21777 82.2681 5.21777 82.7676 cv
5.21777 83.2974 5.30859 84.1069 6.00781 84.1069 cv
6.67773 84.1069 6.79688 83.3774 6.79688 82.8574 cv
cp
6.85742 86.3955 mo
6.85742 85.8159 6.75781 84.7466 5.96777 84.7466 cv
5.14844 84.7466 5.04785 85.856 5.04785 86.4556 cv
5.04785 87.0552 5.1582 88.0649 5.94824 88.0649 cv
6.76758 88.0649 6.85742 87.0151 6.85742 86.3955 cv
cp
7.53711 86.4658 mo
7.53711 87.5352 7.19727 88.7046 5.92773 88.7046 cv
4.75879 88.7046 4.36816 87.605 4.36816 86.6055 cv
4.36816 85.8359 4.48828 84.7568 5.31836 84.437 cv
4.71875 84.0869 4.53809 83.4775 4.53809 82.8076 cv
4.53809 81.8682 4.96875 80.9688 6.03809 80.9688 cv
7.06738 80.9688 7.47656 81.8584 7.47656 82.7578 cv
7.47656 83.4673 7.32715 84.0571 6.6875 84.437 cv
7.42676 84.8164 7.53711 85.7163 7.53711 86.4658 cv
cp
f
8.90039 84.8364 mo
8.90039 86.1958 8.94043 88.0649 9.91016 88.0649 cv
10.8789 88.0649 10.9189 86.1958 10.9189 84.8364 cv
10.9189 83.4775 10.8789 81.6084 9.91016 81.6084 cv
8.94043 81.6084 8.90039 83.4775 8.90039 84.8364 cv
cp
11.5986 84.8364 mo
11.5986 86.3159 11.5488 88.7046 9.91016 88.7046 cv
8.27051 88.7046 8.2207 86.3159 8.2207 84.8364 cv
8.2207 83.3574 8.27051 80.9688 9.91016 80.9688 cv
11.5488 80.9688 11.5986 83.3574 11.5986 84.8364 cv
cp
f
14.3115 88.6045 mo
13.6318 88.6045 li
13.6318 81.728 li
12.6426 81.728 li
12.793 81.0688 li
14.3115 81.0688 li
14.3115 88.6045 li
cp
f
20.3242 86.4458 mo
19.8242 83.5571 li
19.7344 83.0474 19.6943 82.5278 19.6348 82.0181 cv
19.5947 82.0181 li
19.5244 82.5278 19.4746 83.0474 19.3945 83.5571 cv
18.9551 86.4458 li
20.3242 86.4458 li
cp
21.4639 88.6045 mo
20.7139 88.6045 li
20.4336 87.0552 li
18.835 87.0552 li
18.5654 88.6045 li
17.8154 88.6045 li
19.2949 81.0688 li
19.9541 81.0688 li
21.4639 88.6045 li
cp
f
22.5654 88.6045 mo
21.916 88.6045 li
21.916 80.6089 li
22.5654 80.6089 li
22.5654 88.6045 li
cp
f
25.4844 85.626 mo
25.4746 85.5361 li
25.4541 85.0464 25.4346 84.0068 24.7549 84.0068 cv
24.1348 84.0068 23.9951 85.1665 23.9951 85.626 cv
25.4844 85.626 li
cp
23.9854 86.1758 mo
23.9854 86.3257 li
23.9854 86.8354 24.0752 88.0747 24.7842 88.0747 cv
25.3545 88.0747 25.4346 87.2754 25.4346 86.8652 cv
26.1035 86.8652 li
26.0938 87.645 25.7939 88.6846 24.8447 88.6846 cv
23.4951 88.6846 23.3154 87.0854 23.3154 86.0557 cv
23.3154 85.1362 23.5156 83.3975 24.7549 83.3975 cv
25.9541 83.3975 26.1436 84.9663 26.1436 85.8662 cv
26.1436 86.1758 li
23.9854 86.1758 li
cp
f
28.4941 85.9858 mo
29.6436 88.6045 li
28.9238 88.6045 li
28.3945 87.2554 li
28.2842 86.9756 28.1748 86.6953 28.124 86.3955 cv
28.084 86.3955 li
28.0449 86.6953 27.9443 86.9854 27.835 87.2651 cv
27.3252 88.6045 li
26.5957 88.6045 li
27.7744 85.9858 li
26.7148 83.4775 li
27.4346 83.4775 li
27.8545 84.6167 li
27.9746 84.9565 28.084 85.2964 28.1543 85.6563 cv
28.1943 85.6563 li
28.2842 85.2964 28.3545 84.9365 28.4941 84.5869 cv
28.9238 83.4775 li
29.6436 83.4775 li
28.4941 85.9858 li
cp
f
31.5254 83.9272 mo
30.8057 83.9272 30.7656 85.0664 30.7656 85.936 cv
30.7656 88.0547 31.1152 88.1548 31.4951 88.1548 cv
32.125 88.1548 32.2441 87.5649 32.2441 85.9561 cv
32.2441 84.8467 32.165 83.9272 31.5254 83.9272 cv
cp
32.834 88.6045 mo
32.1846 88.6045 li
32.1846 88.2046 li
32.165 88.2046 li
31.9746 88.4946 31.6846 88.6846 31.3154 88.6846 cv
30.4951 88.6846 30.0957 88.2246 30.0957 85.9858 cv
30.0957 84.8364 30.1357 83.3975 31.375 83.3975 cv
31.7344 83.3975 31.9648 83.5474 32.165 83.8271 cv
32.1846 83.8271 li
32.1846 83.4775 li
32.834 83.4775 li
32.834 88.6045 li
cp
f
34.3848 83.8872 mo
34.6445 83.5874 34.9941 83.3975 35.3936 83.3975 cv
36.3037 83.3975 36.3838 84.2368 36.3838 84.9365 cv
36.3838 88.6045 li
35.7334 88.6045 li
35.7334 85.0063 li
35.7334 84.397 35.6934 83.9272 35.1543 83.9272 cv
34.4141 83.9272 34.3848 84.7368 34.3848 85.2764 cv
34.3848 88.6045 li
33.7354 88.6045 li
33.7354 83.4775 li
34.3848 83.4775 li
34.3848 83.8872 li
cp
f
38.5654 83.9272 mo
37.835 83.9272 37.8057 85.2065 37.8057 85.936 cv
37.8057 86.4155 37.7051 88.1548 38.5352 88.1548 cv
39.2246 88.1548 39.2842 87.3052 39.2842 85.9561 cv
39.2842 84.7866 39.165 83.9272 38.5654 83.9272 cv
cp
39.2246 88.2046 mo
39.2051 88.2046 li
39.0146 88.4946 38.7246 88.6846 38.3555 88.6846 cv
37.2861 88.6846 37.1357 87.3853 37.1357 85.9858 cv
37.1357 84.5869 37.2754 83.3975 38.415 83.3975 cv
38.7744 83.3975 39.0049 83.5474 39.2051 83.8271 cv
39.2246 83.8271 li
39.2246 80.6089 li
39.874 80.6089 li
39.874 88.6045 li
39.2246 88.6045 li
39.2246 88.2046 li
cp
f
42.7939 85.626 mo
42.7842 85.5361 li
42.7637 85.0464 42.7441 84.0068 42.0645 84.0068 cv
41.4443 84.0068 41.3047 85.1665 41.3047 85.626 cv
42.7939 85.626 li
cp
41.2949 86.1758 mo
41.2949 86.3257 li
41.2949 86.8354 41.3848 88.0747 42.0938 88.0747 cv
42.6641 88.0747 42.7441 87.2754 42.7441 86.8652 cv
43.4131 86.8652 li
43.4033 87.645 43.1035 88.6846 42.1543 88.6846 cv
40.8047 88.6846 40.625 87.0854 40.625 86.0557 cv
40.625 85.1362 40.8252 83.3975 42.0645 83.3975 cv
43.2637 83.3975 43.4531 84.9663 43.4531 85.8662 cv
43.4531 86.1758 li
41.2949 86.1758 li
cp
f
44.8555 84.1567 mo
44.875 84.1567 li
45.0156 83.7974 45.2949 83.3872 45.7246 83.3975 cv
45.7246 84.1567 li
45.5947 84.147 li
44.9248 84.147 44.8555 84.7964 44.8555 85.6162 cv
44.8555 88.6045 li
44.2061 88.6045 li
44.2061 83.4775 li
44.8555 83.4775 li
44.8555 84.1567 li
cp
f
49.1846 84.9966 mo
49.1846 88.0049 li
49.375 88.0049 li
50.4248 88.0049 50.7344 87.665 50.7344 86.5854 cv
50.7344 85.3164 50.2842 84.9966 49.3945 84.9966 cv
49.1846 84.9966 li
cp
49.1846 81.6685 mo
49.1846 84.397 li
49.375 84.397 li
49.9443 84.397 50.5547 84.4966 50.5547 82.9878 cv
50.5547 81.7983 50.2744 81.6685 49.375 81.6685 cv
49.1846 81.6685 li
cp
49.4648 81.0688 mo
50.4541 81.0688 51.2734 81.1885 51.2734 82.9375 cv
51.2734 83.6772 51.1436 84.3066 50.3945 84.7065 cv
51.2939 84.9966 51.4541 85.6963 51.4541 86.5356 cv
51.4541 88.105 50.9141 88.6045 49.3945 88.6045 cv
48.4854 88.6045 li
48.4854 81.0688 li
49.4648 81.0688 li
cp
f
54.334 85.626 mo
54.3242 85.5361 li
54.3037 85.0464 54.2842 84.0068 53.6045 84.0068 cv
52.9844 84.0068 52.8447 85.1665 52.8447 85.626 cv
54.334 85.626 li
cp
52.835 86.1758 mo
52.835 86.3257 li
52.835 86.8354 52.9248 88.0747 53.6338 88.0747 cv
54.2041 88.0747 54.2842 87.2754 54.2842 86.8652 cv
54.9531 86.8652 li
54.9434 87.645 54.6436 88.6846 53.6943 88.6846 cv
52.3447 88.6846 52.165 87.0854 52.165 86.0557 cv
52.165 85.1362 52.3652 83.3975 53.6045 83.3975 cv
54.8037 83.3975 54.9932 84.9663 54.9932 85.8662 cv
54.9932 86.1758 li
52.835 86.1758 li
cp
f
56.3955 88.6045 mo
55.7461 88.6045 li
55.7461 80.6089 li
56.3955 80.6089 li
56.3955 88.6045 li
cp
f
57.9453 88.6045 mo
57.2959 88.6045 li
57.2959 80.6089 li
57.9453 80.6089 li
57.9453 88.6045 li
cp
f
61.7744 87.9648 mo
61.9746 87.9648 li
63.3242 87.9648 63.4941 87.0151 63.4941 84.8364 cv
63.4941 82.248 63.2236 81.7085 61.8945 81.7085 cv
61.7744 81.7085 li
61.7744 87.9648 li
cp
61.0752 81.0688 mo
61.835 81.0688 li
63.2744 81.0688 64.2139 81.2485 64.2139 84.8364 cv
64.2139 87.7852 63.7334 88.6045 61.8848 88.6045 cv
61.0752 88.6045 li
61.0752 81.0688 li
cp
f
65.6953 84.1567 mo
65.7148 84.1567 li
65.8555 83.7974 66.1348 83.3872 66.5645 83.3975 cv
66.5645 84.1567 li
66.4346 84.147 li
65.7646 84.147 65.6953 84.7964 65.6953 85.6162 cv
65.6953 88.6045 li
65.0459 88.6045 li
65.0459 83.4775 li
65.6953 83.4775 li
65.6953 84.1567 li
cp
f
67.7451 88.6045 mo
67.0957 88.6045 li
67.0957 83.4775 li
67.7451 83.4775 li
67.7451 88.6045 li
cp
67.4248 82.4478 mo
67.1553 82.4478 66.9355 82.228 66.9355 81.958 cv
66.9355 81.6982 67.1553 81.4785 67.4248 81.4785 cv
67.6846 81.4785 67.9053 81.6982 67.9053 81.958 cv
67.9053 82.228 67.6846 82.4478 67.4248 82.4478 cv
cp
f
70.1445 88.6045 mo
69.4443 88.6045 li
68.2754 83.4775 li
68.9346 83.4775 li
69.5947 86.6855 li
69.6641 87.0054 69.7148 87.3252 69.7842 87.645 cv
69.8242 87.645 li
69.8643 87.3252 69.9043 86.9956 69.9639 86.6855 cv
70.6143 83.4775 li
71.2832 83.4775 li
70.1445 88.6045 li
cp
f
73.8242 85.626 mo
73.8145 85.5361 li
73.7939 85.0464 73.7744 84.0068 73.0947 84.0068 cv
72.4746 84.0068 72.335 85.1665 72.335 85.626 cv
73.8242 85.626 li
cp
72.3252 86.1758 mo
72.3252 86.3257 li
72.3252 86.8354 72.415 88.0747 73.124 88.0747 cv
73.6943 88.0747 73.7744 87.2754 73.7744 86.8652 cv
74.4434 86.8652 li
74.4336 87.645 74.1338 88.6846 73.1846 88.6846 cv
71.835 88.6846 71.6553 87.0854 71.6553 86.0557 cv
71.6553 85.1362 71.8555 83.3975 73.0947 83.3975 cv
74.2939 83.3975 74.4834 84.9663 74.4834 85.8662 cv
74.4834 86.1758 li
72.3252 86.1758 li
cp
f
78.1641 84.3467 mo
78.4141 84.3467 li
79.3936 84.3467 79.5537 84.0068 79.5537 83.0176 cv
79.5537 81.8281 79.1943 81.7085 78.3047 81.7085 cv
78.1641 81.7085 li
78.1641 84.3467 li
cp
77.4648 88.6045 mo
77.4648 81.0688 li
78.2148 81.0688 li
79.2637 81.0688 80.2734 81.1484 80.2734 82.9878 cv
80.2734 83.9473 80.0635 84.8867 78.8545 84.9263 cv
80.5234 88.6045 li
79.7832 88.6045 li
78.1846 84.9165 li
78.1641 84.9165 li
78.1641 88.6045 li
77.4648 88.6045 li
cp
f
83.1445 85.626 mo
83.1348 85.5361 li
83.1143 85.0464 83.0947 84.0068 82.415 84.0068 cv
81.7949 84.0068 81.6553 85.1665 81.6553 85.626 cv
83.1445 85.626 li
cp
81.6455 86.1758 mo
81.6455 86.3257 li
81.6455 86.8354 81.7354 88.0747 82.4443 88.0747 cv
83.0146 88.0747 83.0947 87.2754 83.0947 86.8652 cv
83.7637 86.8652 li
83.7539 87.645 83.4541 88.6846 82.5049 88.6846 cv
81.1553 88.6846 80.9756 87.0854 80.9756 86.0557 cv
80.9756 85.1362 81.1758 83.3975 82.415 83.3975 cv
83.6143 83.3975 83.8037 84.9663 83.8037 85.8662 cv
83.8037 86.1758 li
81.6455 86.1758 li
cp
f
86.5137 84.5269 mo
86.4941 84.5269 li
86.3047 84.2568 86.0049 84.0068 85.6445 84.0068 cv
85.2549 84.0068 85.0049 84.3066 85.0049 84.6865 cv
85.0049 85.1763 85.4248 85.4761 85.835 85.8159 cv
86.2539 86.166 86.6641 86.5454 86.6641 87.2153 cv
86.6641 88.0347 86.1143 88.6846 85.2646 88.6846 cv
84.9453 88.6846 84.585 88.5347 84.335 88.3345 cv
84.335 87.5752 li
84.585 87.835 84.8555 88.0747 85.2451 88.0747 cv
85.6943 88.0747 85.9941 87.7251 85.9941 87.2954 cv
85.9941 86.7856 85.585 86.4458 85.165 86.0757 cv
84.7549 85.7163 84.335 85.3164 84.335 84.7065 cv
84.335 83.937 84.8447 83.3975 85.6143 83.3975 cv
85.9443 83.3975 86.2539 83.5273 86.5137 83.7271 cv
86.5137 84.5269 li
cp
f
89.1045 84.0771 mo
88.2549 84.0771 li
88.2549 88.6045 li
87.6055 88.6045 li
87.6055 84.0771 li
87.0557 84.0771 li
87.0557 83.4775 li
87.6055 83.4775 li
87.6055 82.0781 li
88.2549 82.0781 li
88.2549 83.4775 li
89.1045 83.4775 li
89.1045 84.0771 li
cp
f
89.9551 86.0361 mo
89.9551 86.5356 89.9746 88.0747 90.7539 88.0747 cv
91.5342 88.0747 91.5537 86.5356 91.5537 86.0361 cv
91.5537 85.5464 91.5342 84.0068 90.7539 84.0068 cv
89.9746 84.0068 89.9551 85.5464 89.9551 86.0361 cv
cp
92.2236 86.0361 mo
92.2236 87.0054 92.1035 88.6846 90.7539 88.6846 cv
89.4053 88.6846 89.2852 87.0054 89.2852 86.0361 cv
89.2852 85.0767 89.4053 83.3975 90.7539 83.3975 cv
92.1035 83.3975 92.2236 85.0767 92.2236 86.0361 cv
cp
f
93.6348 83.8872 mo
93.8945 83.5874 94.2441 83.3975 94.6436 83.3975 cv
95.5537 83.3975 95.6338 84.2368 95.6338 84.9365 cv
95.6338 88.6045 li
94.9834 88.6045 li
94.9834 85.0063 li
94.9834 84.397 94.9434 83.9272 94.4043 83.9272 cv
93.6641 83.9272 93.6348 84.7368 93.6348 85.2764 cv
93.6348 88.6045 li
92.9854 88.6045 li
92.9854 83.4775 li
93.6348 83.4775 li
93.6348 83.8872 li
cp
f
96.7646 90.2134 mo
96.2852 89.9839 li
97.0547 87.665 li
97.7637 87.9849 li
96.7646 90.2134 li
cp
f
102.494 88.6045 mo
101.874 88.6045 li
100.355 81.0688 li
101.074 81.0688 li
102.064 86.5557 li
102.104 86.7456 102.145 87.2354 102.184 87.5752 cv
102.224 87.5752 li
102.254 87.2354 102.294 86.7354 102.324 86.5557 cv
103.304 81.0688 li
104.013 81.0688 li
102.494 88.6045 li
cp
f
106.345 86.4458 mo
105.845 83.5571 li
105.755 83.0474 105.715 82.5278 105.655 82.0181 cv
105.615 82.0181 li
105.545 82.5278 105.495 83.0474 105.415 83.5571 cv
104.976 86.4458 li
106.345 86.4458 li
cp
107.484 88.6045 mo
106.734 88.6045 li
106.454 87.0552 li
104.855 87.0552 li
104.586 88.6045 li
103.836 88.6045 li
105.315 81.0688 li
105.975 81.0688 li
107.484 88.6045 li
cp
f
113.073 88.6045 mo
109.985 88.6045 li
111.484 85.5264 li
111.904 84.6665 112.483 83.6172 112.483 82.6479 cv
112.483 82.1279 112.284 81.6084 111.654 81.6084 cv
110.904 81.6084 110.785 82.3779 110.785 82.9678 cv
110.785 83.1274 li
110.105 83.1274 li
110.105 82.0981 110.335 80.9688 111.614 80.9688 cv
112.674 80.9688 113.163 81.7183 113.163 82.6978 cv
113.163 83.7671 112.594 84.8364 112.114 85.7759 cv
111.024 87.9849 li
113.073 87.9849 li
113.073 88.6045 li
cp
f
114.587 84.8364 mo
114.587 86.1958 114.627 88.0649 115.597 88.0649 cv
116.565 88.0649 116.605 86.1958 116.605 84.8364 cv
116.605 83.4775 116.565 81.6084 115.597 81.6084 cv
114.627 81.6084 114.587 83.4775 114.587 84.8364 cv
cp
117.285 84.8364 mo
117.285 86.3159 117.235 88.7046 115.597 88.7046 cv
113.957 88.7046 113.907 86.3159 113.907 84.8364 cv
113.907 83.3574 113.957 80.9688 115.597 80.9688 cv
117.235 80.9688 117.285 83.3574 117.285 84.8364 cv
cp
f
119.998 88.6045 mo
119.318 88.6045 li
119.318 81.728 li
118.329 81.728 li
118.479 81.0688 li
119.998 81.0688 li
119.998 88.6045 li
cp
f
122.219 83.2075 mo
122.219 83.7871 122.329 84.7266 123.099 84.7266 cv
123.848 84.7266 123.968 83.7471 123.968 83.1875 cv
123.968 82.6177 123.838 81.6084 123.038 81.6084 cv
122.239 81.6084 122.219 82.6479 122.219 83.2075 cv
cp
123.648 85.0962 mo
123.628 85.0767 li
123.408 85.2466 123.188 85.3364 122.889 85.3364 cv
121.64 85.3364 121.539 83.647 121.539 83.1074 cv
121.539 81.5684 122.179 80.9688 123.028 80.9688 cv
124.308 80.9688 124.647 82.0879 124.647 83.1577 cv
124.647 84.1567 124.368 85.0664 123.998 85.9858 cv
122.908 88.6045 li
122.179 88.6045 li
123.648 85.0962 li
cp
f
127.298 88.6045 mo
126.618 88.6045 li
126.618 81.728 li
125.629 81.728 li
125.779 81.0688 li
127.298 81.0688 li
127.298 88.6045 li
cp
f
128.109 85.0166 mo
129.669 85.0166 li
129.669 85.8062 li
128.109 85.8062 li
128.109 85.0166 li
cp
f
132.298 83.687 mo
132.397 82.1782 li
132.367 82.1782 li
130.958 85.9761 li
132.298 85.9761 li
132.298 83.687 li
cp
132.978 85.9761 mo
133.537 85.9761 li
133.537 86.5757 li
132.978 86.5757 li
132.978 88.6045 li
132.298 88.6045 li
132.298 86.5757 li
130.299 86.5757 li
130.299 85.8662 li
132.317 81.0688 li
132.978 81.0688 li
132.978 85.9761 li
cp
f
135.127 84.7964 mo
135.127 84.1567 li
135.247 84.1567 li
136.307 84.1567 136.626 83.877 136.626 82.7476 cv
136.626 82.168 136.467 81.6084 135.827 81.6084 cv
135.107 81.6084 135.047 82.2578 135.047 82.8276 cv
134.367 82.8276 li
134.338 81.9282 134.737 80.9688 135.787 80.9688 cv
136.866 80.9688 137.306 81.7085 137.306 82.688 cv
137.306 83.3872 137.156 84.127 136.446 84.437 cv
137.286 84.7568 137.406 85.7759 137.406 86.5557 cv
137.406 87.585 137.136 88.7046 135.877 88.7046 cv
134.707 88.7046 134.277 87.9351 134.277 86.8652 cv
134.287 86.5356 li
134.957 86.5356 li
134.957 86.7554 li
134.967 87.375 135.097 88.0649 135.856 88.0649 cv
136.676 88.0649 136.727 87.0352 136.727 86.4355 cv
136.727 85.436 136.427 84.7764 135.327 84.7964 cv
135.127 84.7964 li
cp
f
140.668 82.8574 mo
140.668 82.3281 140.538 81.6084 139.858 81.6084 cv
139.219 81.6084 139.089 82.2681 139.089 82.7676 cv
139.089 83.2974 139.18 84.1069 139.879 84.1069 cv
140.549 84.1069 140.668 83.3774 140.668 82.8574 cv
cp
140.729 86.3955 mo
140.729 85.8159 140.629 84.7466 139.839 84.7466 cv
139.02 84.7466 138.919 85.856 138.919 86.4556 cv
138.919 87.0552 139.029 88.0649 139.819 88.0649 cv
140.639 88.0649 140.729 87.0151 140.729 86.3955 cv
cp
141.408 86.4658 mo
141.408 87.5352 141.068 88.7046 139.799 88.7046 cv
138.63 88.7046 138.239 87.605 138.239 86.6055 cv
138.239 85.8359 138.359 84.7568 139.189 84.437 cv
138.59 84.0869 138.409 83.4775 138.409 82.8076 cv
138.409 81.8682 138.84 80.9688 139.909 80.9688 cv
140.938 80.9688 141.348 81.8584 141.348 82.7578 cv
141.348 83.4673 141.198 84.0571 140.559 84.437 cv
141.298 84.8164 141.408 85.7163 141.408 86.4658 cv
cp
f
145.21 88.6045 mo
142.122 88.6045 li
143.621 85.5264 li
144.041 84.6665 144.62 83.6172 144.62 82.6479 cv
144.62 82.1279 144.421 81.6084 143.791 81.6084 cv
143.041 81.6084 142.922 82.3779 142.922 82.9678 cv
142.922 83.1274 li
142.242 83.1274 li
142.242 82.0981 142.472 80.9688 143.751 80.9688 cv
144.811 80.9688 145.3 81.7183 145.3 82.6978 cv
145.3 83.7671 144.73 84.8364 144.251 85.7759 cv
143.161 87.9849 li
145.21 87.9849 li
145.21 88.6045 li
cp
f
2.11621 103.784 mo
1.30664 102.475 .857422 100.995 .897461 99.5264 cv
.857422 98.0571 1.31738 96.5776 2.11621 95.2686 cv
2.61621 95.4785 li
1.85645 96.7075 1.41699 98.127 1.45703 99.5264 cv
1.41699 100.936 1.85645 102.345 2.61621 103.574 cv
2.11621 103.784 li
cp
f
5.8457 97.8574 mo
5.8457 97.3281 5.71582 96.6084 5.03613 96.6084 cv
4.39648 96.6084 4.2666 97.2681 4.2666 97.7676 cv
4.2666 98.2974 4.35742 99.1069 5.05664 99.1069 cv
5.72656 99.1069 5.8457 98.3774 5.8457 97.8574 cv
cp
5.90625 101.396 mo
5.90625 100.816 5.80664 99.7466 5.0166 99.7466 cv
4.19727 99.7466 4.09668 100.856 4.09668 101.456 cv
4.09668 102.055 4.20703 103.065 4.99707 103.065 cv
5.81641 103.065 5.90625 102.015 5.90625 101.396 cv
cp
6.58594 101.466 mo
6.58594 102.535 6.24609 103.705 4.97656 103.705 cv
3.80762 103.705 3.41699 102.605 3.41699 101.605 cv
3.41699 100.836 3.53711 99.7568 4.36719 99.437 cv
3.76758 99.0869 3.58691 98.4775 3.58691 97.8076 cv
3.58691 96.8682 4.01758 95.9688 5.08691 95.9688 cv
6.11621 95.9688 6.52539 96.8584 6.52539 97.7578 cv
6.52539 98.4673 6.37598 99.0571 5.73633 99.437 cv
6.47559 99.8164 6.58594 100.716 6.58594 101.466 cv
cp
f
8.15625 99.8364 mo
8.15625 101.196 8.19629 103.065 9.16602 103.065 cv
10.1348 103.065 10.1748 101.196 10.1748 99.8364 cv
10.1748 98.4775 10.1348 96.6084 9.16602 96.6084 cv
8.19629 96.6084 8.15625 98.4775 8.15625 99.8364 cv
cp
10.8545 99.8364 mo
10.8545 101.316 10.8047 103.705 9.16602 103.705 cv
7.52637 103.705 7.47656 101.316 7.47656 99.8364 cv
7.47656 98.3574 7.52637 95.9688 9.16602 95.9688 cv
10.8047 95.9688 10.8545 98.3574 10.8545 99.8364 cv
cp
f
12.3164 99.8364 mo
12.3164 101.196 12.3564 103.065 13.3262 103.065 cv
14.2949 103.065 14.335 101.196 14.335 99.8364 cv
14.335 98.4775 14.2949 96.6084 13.3262 96.6084 cv
12.3564 96.6084 12.3164 98.4775 12.3164 99.8364 cv
cp
15.0146 99.8364 mo
15.0146 101.316 14.9648 103.705 13.3262 103.705 cv
11.6865 103.705 11.6367 101.316 11.6367 99.8364 cv
11.6367 98.3574 11.6865 95.9688 13.3262 95.9688 cv
14.9648 95.9688 15.0146 98.3574 15.0146 99.8364 cv
cp
f
15.7168 103.574 mo
16.4766 102.345 16.916 100.936 16.876 99.5264 cv
16.916 98.127 16.4766 96.7075 15.7168 95.4785 cv
16.2168 95.2686 li
17.0166 96.5776 17.4766 98.0571 17.4365 99.5264 cv
17.4766 100.995 17.0264 102.475 16.2168 103.784 cv
15.7168 103.574 li
cp
f
23.4492 96.6885 mo
21.7705 96.6885 li
21.4902 99.0269 li
21.9404 98.9868 li
23.21 98.9868 23.6689 100.266 23.6689 101.346 cv
23.6689 102.445 23.21 103.705 21.9199 103.705 cv
21.4609 103.705 20.9805 103.555 20.6211 103.275 cv
20.8105 102.585 li
21.1309 102.825 21.4805 103.025 21.9004 103.025 cv
22.7598 103.025 22.9893 101.996 22.9893 101.336 cv
22.9893 100.536 22.71 99.6665 21.7402 99.6665 cv
21.3809 99.6665 21.041 99.7866 20.7412 99.9663 cv
21.2109 96.0688 li
23.4492 96.0688 li
23.4492 96.6885 li
cp
f
26.6504 98.687 mo
26.75 97.1782 li
26.7197 97.1782 li
25.3105 100.976 li
26.6504 100.976 li
26.6504 98.687 li
cp
27.3301 100.976 mo
27.8896 100.976 li
27.8896 101.576 li
27.3301 101.576 li
27.3301 103.604 li
26.6504 103.604 li
26.6504 101.576 li
24.6514 101.576 li
24.6514 100.866 li
26.6699 96.0688 li
27.3301 96.0688 li
27.3301 100.976 li
cp
f
31.3096 97.8574 mo
31.3096 97.3281 31.1797 96.6084 30.5 96.6084 cv
29.8604 96.6084 29.7305 97.2681 29.7305 97.7676 cv
29.7305 98.2974 29.8213 99.1069 30.5205 99.1069 cv
31.1904 99.1069 31.3096 98.3774 31.3096 97.8574 cv
cp
31.3701 101.396 mo
31.3701 100.816 31.2695 99.7466 30.4805 99.7466 cv
29.6611 99.7466 29.5605 100.856 29.5605 101.456 cv
29.5605 102.055 29.6709 103.065 30.4609 103.065 cv
31.2803 103.065 31.3701 102.015 31.3701 101.396 cv
cp
32.0498 101.466 mo
32.0498 102.535 31.71 103.705 30.4404 103.705 cv
29.2715 103.705 28.8809 102.605 28.8809 101.605 cv
28.8809 100.836 29.001 99.7568 29.8311 99.437 cv
29.2314 99.0869 29.0508 98.4775 29.0508 97.8076 cv
29.0508 96.8682 29.4814 95.9688 30.5508 95.9688 cv
31.5801 95.9688 31.9893 96.8584 31.9893 97.7578 cv
31.9893 98.4673 31.8398 99.0571 31.2002 99.437 cv
31.9395 99.8164 32.0498 100.716 32.0498 101.466 cv
cp
f
34.1006 103.175 mo
34.1006 103.455 33.8711 103.685 33.5908 103.685 cv
33.3115 103.685 33.0811 103.455 33.0811 103.175 cv
33.0811 102.895 33.3115 102.665 33.5908 102.665 cv
33.8711 102.665 34.1006 102.895 34.1006 103.175 cv
cp
f
38.1396 103.604 mo
35.0518 103.604 li
36.5508 100.526 li
36.9707 99.6665 37.5498 98.6172 37.5498 97.6479 cv
37.5498 97.1279 37.3506 96.6084 36.7207 96.6084 cv
35.9707 96.6084 35.8516 97.3779 35.8516 97.9678 cv
35.8516 98.1274 li
35.1719 98.1274 li
35.1719 97.0981 35.4014 95.9688 36.6807 95.9688 cv
37.7402 95.9688 38.2295 96.7183 38.2295 97.6978 cv
38.2295 98.7671 37.6602 99.8364 37.1807 100.776 cv
36.0908 102.985 li
38.1396 102.985 li
38.1396 103.604 li
cp
f
42.459 96.0688 mo
40.1406 103.604 li
39.4004 103.604 li
41.5293 96.6885 li
39.3604 96.6885 li
39.3604 96.0688 li
42.459 96.0688 li
cp
f
46.459 103.604 mo
43.3711 103.604 li
44.8701 100.526 li
45.29 99.6665 45.8691 98.6172 45.8691 97.6479 cv
45.8691 97.1279 45.6699 96.6084 45.04 96.6084 cv
44.29 96.6084 44.1709 97.3779 44.1709 97.9678 cv
44.1709 98.1274 li
43.4912 98.1274 li
43.4912 97.0981 43.7207 95.9688 45 95.9688 cv
46.0596 95.9688 46.5488 96.7183 46.5488 97.6978 cv
46.5488 98.7671 45.9795 99.8364 45.5 100.776 cv
44.4102 102.985 li
46.459 102.985 li
46.459 103.604 li
cp
f
48.4404 99.7964 mo
48.4404 99.1567 li
48.5605 99.1567 li
49.6201 99.1567 49.9395 98.877 49.9395 97.7476 cv
49.9395 97.168 49.7803 96.6084 49.1406 96.6084 cv
48.4209 96.6084 48.3604 97.2578 48.3604 97.8276 cv
47.6807 97.8276 li
47.6514 96.9282 48.0508 95.9688 49.1006 95.9688 cv
50.1797 95.9688 50.6191 96.7085 50.6191 97.688 cv
50.6191 98.3872 50.4697 99.127 49.7598 99.437 cv
50.5996 99.7568 50.7197 100.776 50.7197 101.556 cv
50.7197 102.585 50.4492 103.705 49.1904 103.705 cv
48.0205 103.705 47.5908 102.935 47.5908 101.865 cv
47.6006 101.536 li
48.2705 101.536 li
48.2705 101.755 li
48.2803 102.375 48.4102 103.065 49.1699 103.065 cv
49.9902 103.065 50.04 102.035 50.04 101.436 cv
50.04 100.436 49.7402 99.7764 48.6406 99.7964 cv
48.4404 99.7964 li
cp
f
55.998 99.5264 mo
55.2334 99.5264 li
54.585 103.604 li
54 103.604 li
54.6484 99.5264 li
54.1523 99.5264 li
54.2334 98.9863 li
54.7285 98.9863 li
54.9268 97.7256 li
55.5117 97.7256 li
55.3145 98.9863 li
56.0791 98.9863 li
55.998 99.5264 li
cp
f
56.4834 101.291 mo
56.4111 101.741 56.2041 103.127 56.9063 103.127 cv
57.6094 103.127 57.8516 101.741 57.9238 101.291 cv
57.9873 100.85 58.1943 99.4634 57.4922 99.4634 cv
56.79 99.4634 56.5469 100.85 56.4834 101.291 cv
cp
58.5273 101.291 mo
58.3828 102.164 58.041 103.676 56.8262 103.676 cv
55.6104 103.676 55.7363 102.164 55.8809 101.291 cv
56.0156 100.427 56.3662 98.9141 57.582 98.9141 cv
58.7969 98.9141 58.6621 100.427 58.5273 101.291 cv
cp
f
59.4268 103.604 mo
58.8418 103.604 li
59.9854 96.4023 li
60.5703 96.4023 li
59.4268 103.604 li
cp
f
60.8213 103.604 mo
60.2363 103.604 li
61.3799 96.4023 li
61.9648 96.4023 li
60.8213 103.604 li
cp
f
65.5928 99.5264 mo
64.8271 99.5264 li
64.1787 103.604 li
63.5938 103.604 li
64.2422 99.5264 li
63.7471 99.5264 li
63.8281 98.9863 li
64.3232 98.9863 li
64.5391 97.6265 li
64.665 96.8433 64.9531 96.3306 65.6104 96.3306 cv
65.7813 96.3306 65.9619 96.3574 66.1055 96.4292 cv
66.0068 97.0684 li
65.8984 96.9697 65.7813 96.8706 65.6104 96.8706 cv
65.2861 96.8706 65.2051 97.1494 65.124 97.6089 cv
64.9082 98.9863 li
65.6738 98.9863 li
65.5928 99.5264 li
cp
f
66.5908 99.5981 mo
66.6094 99.5981 li
66.7891 99.2744 67.1045 98.9053 67.4912 98.9141 cv
67.374 99.5981 li
67.2666 99.5894 li
66.6631 99.5894 66.501 100.174 66.3838 100.913 cv
65.9609 103.604 li
65.376 103.604 li
66.1055 98.9863 li
66.6904 98.9863 li
66.5908 99.5981 li
cp
f
69.4619 100.922 mo
69.4717 100.841 li
69.5166 100.399 69.6514 99.4634 69.0391 99.4634 cv
68.4805 99.4634 68.1836 100.507 68.1211 100.922 cv
69.4619 100.922 li
cp
68.0313 101.417 mo
68.0127 101.552 li
67.9404 102.011 67.8418 103.127 68.4805 103.127 cv
68.9941 103.127 69.1836 102.407 69.2461 102.038 cv
69.8496 102.038 li
69.7236 102.74 69.3096 103.676 68.4541 103.676 cv
67.2383 103.676 67.3018 102.236 67.4453 101.309 cv
67.5811 100.48 68.0127 98.9141 69.1289 98.9141 cv
70.209 98.9141 70.1553 100.328 70.0205 101.138 cv
69.9756 101.417 li
68.0313 101.417 li
cp
f
72.5488 100.922 mo
72.5586 100.841 li
72.6035 100.399 72.7383 99.4634 72.126 99.4634 cv
71.5674 99.4634 71.2705 100.507 71.208 100.922 cv
72.5488 100.922 li
cp
71.1182 101.417 mo
71.0996 101.552 li
71.0273 102.011 70.9287 103.127 71.5674 103.127 cv
72.0811 103.127 72.2705 102.407 72.333 102.038 cv
72.9365 102.038 li
72.8105 102.74 72.3965 103.676 71.541 103.676 cv
70.3252 103.676 70.3887 102.236 70.5322 101.309 cv
70.668 100.48 71.0996 98.9141 72.2158 98.9141 cv
73.2959 98.9141 73.2422 100.328 73.1074 101.138 cv
73.0625 101.417 li
71.1182 101.417 li
cp
f
77.2578 103.784 mo
76.4482 102.475 75.999 100.995 76.0391 99.5264 cv
75.999 98.0571 76.459 96.5776 77.2578 95.2686 cv
77.7578 95.4785 li
76.998 96.7075 76.5586 98.127 76.5986 99.5264 cv
76.5586 100.936 76.998 102.345 77.7578 103.574 cv
77.2578 103.784 li
cp
f
81.7373 96.0688 mo
79.4189 103.604 li
78.6787 103.604 li
80.8076 96.6885 li
78.6387 96.6885 li
78.6387 96.0688 li
81.7373 96.0688 li
cp
f
83.2988 99.8364 mo
83.2988 101.196 83.3389 103.065 84.3086 103.065 cv
85.2773 103.065 85.3174 101.196 85.3174 99.8364 cv
85.3174 98.4775 85.2773 96.6084 84.3086 96.6084 cv
83.3389 96.6084 83.2988 98.4775 83.2988 99.8364 cv
cp
85.9971 99.8364 mo
85.9971 101.316 85.9473 103.705 84.3086 103.705 cv
82.6689 103.705 82.6191 101.316 82.6191 99.8364 cv
82.6191 98.3574 82.6689 95.9688 84.3086 95.9688 cv
85.9473 95.9688 85.9971 98.3574 85.9971 99.8364 cv
cp
f
87.7188 99.7964 mo
87.7188 99.1567 li
87.8389 99.1567 li
88.8984 99.1567 89.2178 98.877 89.2178 97.7476 cv
89.2178 97.168 89.0586 96.6084 88.4189 96.6084 cv
87.6992 96.6084 87.6387 97.2578 87.6387 97.8276 cv
86.959 97.8276 li
86.9297 96.9282 87.3291 95.9688 88.3789 95.9688 cv
89.458 95.9688 89.8975 96.7085 89.8975 97.688 cv
89.8975 98.3872 89.748 99.127 89.0381 99.437 cv
89.8779 99.7568 89.998 100.776 89.998 101.556 cv
89.998 102.585 89.7275 103.705 88.4688 103.705 cv
87.2988 103.705 86.8691 102.935 86.8691 101.865 cv
86.8789 101.536 li
87.5488 101.536 li
87.5488 101.755 li
87.5586 102.375 87.6885 103.065 88.4482 103.065 cv
89.2676 103.065 89.3184 102.035 89.3184 101.436 cv
89.3184 100.436 89.0186 99.7764 87.9189 99.7964 cv
87.7188 99.7964 li
cp
f
90.8594 103.574 mo
91.6191 102.345 92.0586 100.936 92.0186 99.5264 cv
92.0586 98.127 91.6191 96.7075 90.8594 95.4785 cv
91.3594 95.2686 li
92.1592 96.5776 92.6191 98.0571 92.5791 99.5264 cv
92.6191 100.995 92.1689 102.475 91.3594 103.784 cv
90.8594 103.574 li
cp
f
98.7217 103.604 mo
95.6338 103.604 li
97.1328 100.526 li
97.5527 99.6665 98.1318 98.6172 98.1318 97.6479 cv
98.1318 97.1279 97.9326 96.6084 97.3027 96.6084 cv
96.5527 96.6084 96.4336 97.3779 96.4336 97.9678 cv
96.4336 98.1274 li
95.7539 98.1274 li
95.7539 97.0981 95.9834 95.9688 97.2627 95.9688 cv
98.3223 95.9688 98.8115 96.7183 98.8115 97.6978 cv
98.8115 98.7671 98.2422 99.8364 97.7627 100.776 cv
96.6729 102.985 li
98.7217 102.985 li
98.7217 103.604 li
cp
f
100.572 98.2075 mo
100.572 98.7871 100.683 99.7266 101.452 99.7266 cv
102.201 99.7266 102.321 98.7471 102.321 98.1875 cv
102.321 97.6177 102.191 96.6084 101.392 96.6084 cv
100.593 96.6084 100.572 97.6479 100.572 98.2075 cv
cp
102.002 100.096 mo
101.981 100.077 li
101.762 100.247 101.542 100.336 101.242 100.336 cv
99.9932 100.336 99.8926 98.647 99.8926 98.1074 cv
99.8926 96.5684 100.532 95.9688 101.382 95.9688 cv
102.661 95.9688 103.001 97.0879 103.001 98.1577 cv
103.001 99.1567 102.722 100.066 102.352 100.986 cv
101.262 103.604 li
100.532 103.604 li
102.002 100.096 li
cp
f
106.911 96.6885 mo
105.232 96.6885 li
104.952 99.0269 li
105.402 98.9868 li
106.672 98.9868 107.131 100.266 107.131 101.346 cv
107.131 102.445 106.672 103.705 105.382 103.705 cv
104.923 103.705 104.442 103.555 104.083 103.275 cv
104.272 102.585 li
104.593 102.825 104.942 103.025 105.362 103.025 cv
106.222 103.025 106.451 101.996 106.451 101.336 cv
106.451 100.536 106.172 99.6665 105.202 99.6665 cv
104.843 99.6665 104.503 99.7866 104.203 99.9663 cv
104.673 96.0688 li
106.911 96.0688 li
106.911 96.6885 li
cp
f
109.242 103.175 mo
109.242 103.455 109.013 103.685 108.732 103.685 cv
108.453 103.685 108.223 103.455 108.223 103.175 cv
108.223 102.895 108.453 102.665 108.732 102.665 cv
109.013 102.665 109.242 102.895 109.242 103.175 cv
cp
f
111.902 103.065 mo
112.702 103.065 112.722 101.985 112.722 101.456 cv
112.722 100.876 112.612 99.9365 111.843 99.9365 cv
111.093 99.9365 110.973 100.916 110.973 101.486 cv
110.973 102.055 111.093 103.065 111.902 103.065 cv
cp
111.282 99.5767 mo
111.303 99.5967 li
111.522 99.4268 111.752 99.3267 112.052 99.3267 cv
113.151 99.3267 113.401 100.716 113.401 101.556 cv
113.401 102.565 113.142 103.705 111.912 103.705 cv
110.633 103.705 110.293 102.585 110.293 101.516 cv
110.293 100.506 110.563 99.6069 110.942 98.687 cv
112.032 96.0688 li
112.762 96.0688 li
111.282 99.5767 li
cp
f
115.263 99.7964 mo
115.263 99.1567 li
115.383 99.1567 li
116.442 99.1567 116.762 98.877 116.762 97.7476 cv
116.762 97.168 116.603 96.6084 115.963 96.6084 cv
115.243 96.6084 115.183 97.2578 115.183 97.8276 cv
114.503 97.8276 li
114.474 96.9282 114.873 95.9688 115.923 95.9688 cv
117.002 95.9688 117.441 96.7085 117.441 97.688 cv
117.441 98.3872 117.292 99.127 116.582 99.437 cv
117.422 99.7568 117.542 100.776 117.542 101.556 cv
117.542 102.585 117.271 103.705 116.013 103.705 cv
114.843 103.705 114.413 102.935 114.413 101.865 cv
114.423 101.536 li
115.093 101.536 li
115.093 101.755 li
115.103 102.375 115.232 103.065 115.992 103.065 cv
116.813 103.065 116.862 102.035 116.862 101.436 cv
116.862 100.436 116.563 99.7764 115.463 99.7964 cv
115.263 99.7964 li
cp
f
119.163 99.8364 mo
119.163 101.196 119.203 103.065 120.173 103.065 cv
121.142 103.065 121.182 101.196 121.182 99.8364 cv
121.182 98.4775 121.142 96.6084 120.173 96.6084 cv
119.203 96.6084 119.163 98.4775 119.163 99.8364 cv
cp
121.861 99.8364 mo
121.861 101.316 121.812 103.705 120.173 103.705 cv
118.533 103.705 118.483 101.316 118.483 99.8364 cv
118.483 98.3574 118.533 95.9688 120.173 95.9688 cv
121.812 95.9688 121.861 98.3574 121.861 99.8364 cv
cp
f
123.322 99.8364 mo
123.322 101.196 123.362 103.065 124.332 103.065 cv
125.301 103.065 125.341 101.196 125.341 99.8364 cv
125.341 98.4775 125.301 96.6084 124.332 96.6084 cv
123.362 96.6084 123.322 98.4775 123.322 99.8364 cv
cp
126.021 99.8364 mo
126.021 101.316 125.971 103.705 124.332 103.705 cv
122.692 103.705 122.643 101.316 122.643 99.8364 cv
122.643 98.3574 122.692 95.9688 124.332 95.9688 cv
125.971 95.9688 126.021 98.3574 126.021 99.8364 cv
cp
f
130.078 98.0591 mo
129.835 98.0591 129.663 97.8608 129.699 97.6177 cv
129.735 97.3838 129.97 97.1855 130.213 97.1855 cv
130.446 97.1855 130.608 97.3838 130.573 97.6177 cv
130.537 97.8608 130.312 98.0591 130.078 98.0591 cv
cp
129.483 103.604 mo
128.898 103.604 li
129.628 98.9863 li
130.213 98.9863 li
129.483 103.604 li
cp
f
131.554 99.355 mo
131.833 99.085 132.176 98.9141 132.535 98.9141 cv
133.354 98.9141 133.301 99.6704 133.201 100.3 cv
132.68 103.604 li
132.095 103.604 li
132.607 100.364 li
132.697 99.8145 132.725 99.3911 132.238 99.3911 cv
131.572 99.3911 131.428 100.121 131.356 100.606 cv
130.879 103.604 li
130.294 103.604 li
131.023 98.9863 li
131.608 98.9863 li
131.554 99.355 li
cp
f
135.729 99.5264 mo
134.965 99.5264 li
134.316 103.604 li
133.731 103.604 li
134.379 99.5264 li
133.884 99.5264 li
133.965 98.9863 li
134.46 98.9863 li
134.658 97.7256 li
135.244 97.7256 li
135.046 98.9863 li
135.811 98.9863 li
135.729 99.5264 li
cp
f
135.964 103.604 mo
135.379 103.604 li
136.522 96.4023 li
137.107 96.4023 li
135.964 103.604 li
cp
f
2.11621 118.784 mo
1.30664 117.475 .857422 115.995 .897461 114.526 cv
.857422 113.057 1.31738 111.578 2.11621 110.269 cv
2.61621 110.479 li
1.85645 111.708 1.41699 113.127 1.45703 114.526 cv
1.41699 115.936 1.85645 117.345 2.61621 118.574 cv
2.11621 118.784 li
cp
f
6.5957 111.069 mo
4.27734 118.604 li
3.53711 118.604 li
5.66602 111.688 li
3.49707 111.688 li
3.49707 111.069 li
6.5957 111.069 li
cp
f
8.15625 114.836 mo
8.15625 116.196 8.19629 118.065 9.16602 118.065 cv
10.1348 118.065 10.1748 116.196 10.1748 114.836 cv
10.1748 113.478 10.1348 111.608 9.16602 111.608 cv
8.19629 111.608 8.15625 113.478 8.15625 114.836 cv
cp
10.8545 114.836 mo
10.8545 116.316 10.8047 118.705 9.16602 118.705 cv
7.52637 118.705 7.47656 116.316 7.47656 114.836 cv
7.47656 113.357 7.52637 110.969 9.16602 110.969 cv
10.8047 110.969 10.8545 113.357 10.8545 114.836 cv
cp
f
12.5762 114.796 mo
12.5762 114.157 li
12.6963 114.157 li
13.7559 114.157 14.0752 113.877 14.0752 112.748 cv
14.0752 112.168 13.916 111.608 13.2764 111.608 cv
12.5566 111.608 12.4961 112.258 12.4961 112.828 cv
11.8164 112.828 li
11.7871 111.928 12.1865 110.969 13.2363 110.969 cv
14.3154 110.969 14.7549 111.708 14.7549 112.688 cv
14.7549 113.387 14.6055 114.127 13.8955 114.437 cv
14.7354 114.757 14.8555 115.776 14.8555 116.556 cv
14.8555 117.585 14.585 118.705 13.3262 118.705 cv
12.1563 118.705 11.7266 117.935 11.7266 116.865 cv
11.7363 116.536 li
12.4063 116.536 li
12.4063 116.755 li
12.416 117.375 12.5459 118.065 13.3057 118.065 cv
14.125 118.065 14.1758 117.035 14.1758 116.436 cv
14.1758 115.436 13.876 114.776 12.7764 114.796 cv
12.5762 114.796 li
cp
f
15.7168 118.574 mo
16.4766 117.345 16.916 115.936 16.876 114.526 cv
16.916 113.127 16.4766 111.708 15.7168 110.479 cv
16.2168 110.269 li
17.0166 111.578 17.4766 113.057 17.4365 114.526 cv
17.4766 115.995 17.0264 117.475 16.2168 118.784 cv
15.7168 118.574 li
cp
f
23.5791 118.604 mo
20.4912 118.604 li
21.9902 115.526 li
22.4102 114.667 22.9893 113.617 22.9893 112.648 cv
22.9893 112.128 22.79 111.608 22.1602 111.608 cv
21.4102 111.608 21.291 112.378 21.291 112.968 cv
21.291 113.127 li
20.6113 113.127 li
20.6113 112.098 20.8408 110.969 22.1201 110.969 cv
23.1797 110.969 23.6689 111.718 23.6689 112.698 cv
23.6689 113.767 23.0996 114.836 22.6201 115.776 cv
21.5303 117.985 li
23.5791 117.985 li
23.5791 118.604 li
cp
f
25.4307 113.208 mo
25.4307 113.787 25.541 114.727 26.3105 114.727 cv
27.0596 114.727 27.1797 113.747 27.1797 113.188 cv
27.1797 112.618 27.0498 111.608 26.25 111.608 cv
25.4512 111.608 25.4307 112.648 25.4307 113.208 cv
cp
26.8604 115.096 mo
26.8398 115.077 li
26.6201 115.247 26.4004 115.336 26.1006 115.336 cv
24.8516 115.336 24.751 113.647 24.751 113.107 cv
24.751 111.568 25.3906 110.969 26.2402 110.969 cv
27.5195 110.969 27.8594 112.088 27.8594 113.158 cv
27.8594 114.157 27.5801 115.066 27.21 115.986 cv
26.1201 118.604 li
25.3906 118.604 li
26.8604 115.096 li
cp
f
31.7695 111.688 mo
30.0908 111.688 li
29.8105 114.027 li
30.2607 113.987 li
31.5303 113.987 31.9893 115.266 31.9893 116.346 cv
31.9893 117.445 31.5303 118.705 30.2402 118.705 cv
29.7813 118.705 29.3008 118.555 28.9414 118.275 cv
29.1309 117.585 li
29.4512 117.825 29.8008 118.025 30.2207 118.025 cv
31.0801 118.025 31.3096 116.996 31.3096 116.336 cv
31.3096 115.536 31.0303 114.667 30.0605 114.667 cv
29.7012 114.667 29.3613 114.787 29.0615 114.966 cv
29.5313 111.069 li
31.7695 111.069 li
31.7695 111.688 li
cp
f
34.1006 118.175 mo
34.1006 118.455 33.8711 118.685 33.5908 118.685 cv
33.3115 118.685 33.0811 118.455 33.0811 118.175 cv
33.0811 117.895 33.3115 117.665 33.5908 117.665 cv
33.8711 117.665 34.1006 117.895 34.1006 118.175 cv
cp
f
36.7607 118.065 mo
37.5605 118.065 37.5801 116.985 37.5801 116.456 cv
37.5801 115.876 37.4707 114.937 36.7012 114.937 cv
35.9512 114.937 35.8311 115.916 35.8311 116.486 cv
35.8311 117.055 35.9512 118.065 36.7607 118.065 cv
cp
36.1406 114.577 mo
36.1611 114.597 li
36.3809 114.427 36.6104 114.327 36.9102 114.327 cv
38.0098 114.327 38.2598 115.716 38.2598 116.556 cv
38.2598 117.565 38 118.705 36.7705 118.705 cv
35.4912 118.705 35.1514 117.585 35.1514 116.516 cv
35.1514 115.506 35.4219 114.607 35.8008 113.687 cv
36.8906 111.069 li
37.6201 111.069 li
36.1406 114.577 li
cp
f
40.1201 114.796 mo
40.1201 114.157 li
40.2402 114.157 li
41.2998 114.157 41.6191 113.877 41.6191 112.748 cv
41.6191 112.168 41.46 111.608 40.8203 111.608 cv
40.1006 111.608 40.04 112.258 40.04 112.828 cv
39.3604 112.828 li
39.3311 111.928 39.7305 110.969 40.7803 110.969 cv
41.8594 110.969 42.2988 111.708 42.2988 112.688 cv
42.2988 113.387 42.1494 114.127 41.4395 114.437 cv
42.2793 114.757 42.3994 115.776 42.3994 116.556 cv
42.3994 117.585 42.1289 118.705 40.8701 118.705 cv
39.7002 118.705 39.2705 117.935 39.2705 116.865 cv
39.2803 116.536 li
39.9502 116.536 li
39.9502 116.755 li
39.96 117.375 40.0898 118.065 40.8496 118.065 cv
41.6699 118.065 41.7197 117.035 41.7197 116.436 cv
41.7197 115.436 41.4199 114.776 40.3203 114.796 cv
40.1201 114.796 li
cp
f
44.2803 114.796 mo
44.2803 114.157 li
44.4004 114.157 li
45.46 114.157 45.7793 113.877 45.7793 112.748 cv
45.7793 112.168 45.6201 111.608 44.9805 111.608 cv
44.2607 111.608 44.2002 112.258 44.2002 112.828 cv
43.5205 112.828 li
43.4912 111.928 43.8906 110.969 44.9404 110.969 cv
46.0195 110.969 46.459 111.708 46.459 112.688 cv
46.459 113.387 46.3096 114.127 45.5996 114.437 cv
46.4395 114.757 46.5596 115.776 46.5596 116.556 cv
46.5596 117.585 46.2891 118.705 45.0303 118.705 cv
43.8604 118.705 43.4307 117.935 43.4307 116.865 cv
43.4404 116.536 li
44.1104 116.536 li
44.1104 116.755 li
44.1201 117.375 44.25 118.065 45.0098 118.065 cv
45.8301 118.065 45.8799 117.035 45.8799 116.436 cv
45.8799 115.436 45.5801 114.776 44.4805 114.796 cv
44.2803 114.796 li
cp
f
48.4404 114.796 mo
48.4404 114.157 li
48.5605 114.157 li
49.6201 114.157 49.9395 113.877 49.9395 112.748 cv
49.9395 112.168 49.7803 111.608 49.1406 111.608 cv
48.4209 111.608 48.3604 112.258 48.3604 112.828 cv
47.6807 112.828 li
47.6514 111.928 48.0508 110.969 49.1006 110.969 cv
50.1797 110.969 50.6191 111.708 50.6191 112.688 cv
50.6191 113.387 50.4697 114.127 49.7598 114.437 cv
50.5996 114.757 50.7197 115.776 50.7197 116.556 cv
50.7197 117.585 50.4492 118.705 49.1904 118.705 cv
48.0205 118.705 47.5908 117.935 47.5908 116.865 cv
47.6006 116.536 li
48.2705 116.536 li
48.2705 116.755 li
48.2803 117.375 48.4102 118.065 49.1699 118.065 cv
49.9902 118.065 50.04 117.035 50.04 116.436 cv
50.04 115.436 49.7402 114.776 48.6406 114.796 cv
48.4404 114.796 li
cp
f
55.8457 114.526 mo
55.0801 114.526 li
54.4316 118.604 li
53.8467 118.604 li
54.4951 114.526 li
54 114.526 li
54.0811 113.986 li
54.5762 113.986 li
54.792 112.626 li
54.918 111.843 55.2061 111.331 55.8633 111.331 cv
56.0342 111.331 56.2148 111.357 56.3584 111.429 cv
56.2598 112.068 li
56.1514 111.97 56.0342 111.871 55.8633 111.871 cv
55.5391 111.871 55.458 112.149 55.377 112.609 cv
55.1611 113.986 li
55.9268 113.986 li
55.8457 114.526 li
cp
f
57.4473 114.391 mo
56.7988 114.391 56.6006 115.417 56.4746 116.201 cv
56.1777 118.109 56.4746 118.199 56.8174 118.199 cv
57.3848 118.199 57.5732 117.668 57.8076 116.219 cv
57.9697 115.219 58.0234 114.391 57.4473 114.391 cv
cp
57.9609 118.604 mo
57.375 118.604 li
57.4297 118.245 li
57.4111 118.245 li
57.2041 118.505 56.916 118.676 56.583 118.676 cv
55.8447 118.676 55.5479 118.262 55.8633 116.246 cv
56.0342 115.21 56.2773 113.914 57.3936 113.914 cv
57.7178 113.914 57.8975 114.049 58.041 114.301 cv
58.0596 114.301 li
58.1045 113.986 li
58.6895 113.986 li
57.9609 118.604 li
cp
f
60.5791 116.246 mo
61.2451 118.604 li
60.5967 118.604 li
60.3086 117.389 li
60.2549 117.137 60.1914 116.885 60.1914 116.615 cv
60.1563 116.615 li
60.0752 116.885 59.9492 117.146 59.8047 117.398 cv
59.1563 118.604 li
58.499 118.604 li
59.9307 116.246 li
59.3369 113.986 li
59.9844 113.986 li
60.2012 115.012 li
60.2637 115.318 60.3086 115.625 60.3271 115.949 cv
60.3633 115.949 li
60.4893 115.625 60.6055 115.3 60.7861 114.985 cv
61.3262 113.986 li
61.9746 113.986 li
60.5791 116.246 li
cp
f
65.4941 118.604 mo
65.4941 113.621 li
69.6387 113.621 li
69.6387 118.604 li
65.4941 118.604 li
cp
.172 .127 .097 .307 cmyk
f
77.8379 118.604 mo
77.168 118.604 li
76.5791 114.887 li
76.5488 114.707 76.5488 114.517 76.5283 114.337 cv
76.499 114.337 li
76.4688 114.646 76.4482 114.957 76.3984 115.266 cv
75.8486 118.604 li
75.1895 118.604 li
74.1504 113.478 li
74.8096 113.478 li
75.2998 116.506 li
75.3594 116.896 75.4395 117.275 75.5088 117.665 cv
75.5488 117.665 li
75.5996 117.275 75.6387 116.896 75.6992 116.506 cv
76.1992 113.478 li
76.8584 113.478 li
77.3984 117.025 li
77.4277 117.235 77.458 117.455 77.4883 117.665 cv
77.5186 117.665 li
77.5684 117.335 77.5977 116.996 77.668 116.666 cv
78.3076 113.478 li
78.9678 113.478 li
77.8379 118.604 li
cp
.23 .17 .13 .41 cmyk
f
82.8779 118.604 mo
82.208 118.604 li
81.6191 114.887 li
81.5889 114.707 81.5889 114.517 81.5684 114.337 cv
81.5391 114.337 li
81.5088 114.646 81.4883 114.957 81.4385 115.266 cv
80.8887 118.604 li
80.2295 118.604 li
79.1904 113.478 li
79.8496 113.478 li
80.3398 116.506 li
80.3994 116.896 80.4795 117.275 80.5488 117.665 cv
80.5889 117.665 li
80.6396 117.275 80.6797 116.896 80.7393 116.506 cv
81.2393 113.478 li
81.8984 113.478 li
82.4385 117.025 li
82.4678 117.235 82.498 117.455 82.5283 117.665 cv
82.5586 117.665 li
82.6084 117.335 82.6377 116.996 82.708 116.666 cv
83.3477 113.478 li
84.0078 113.478 li
82.8779 118.604 li
cp
f
87.918 118.604 mo
87.248 118.604 li
86.6592 114.887 li
86.6289 114.707 86.6289 114.517 86.6084 114.337 cv
86.5791 114.337 li
86.5488 114.646 86.5283 114.957 86.4785 115.266 cv
85.9287 118.604 li
85.2695 118.604 li
84.2305 113.478 li
84.8896 113.478 li
85.3799 116.506 li
85.4395 116.896 85.5195 117.275 85.5889 117.665 cv
85.6289 117.665 li
85.6797 117.275 85.7188 116.896 85.7793 116.506 cv
86.2793 113.478 li
86.9385 113.478 li
87.4785 117.025 li
87.5078 117.235 87.5381 117.455 87.5684 117.665 cv
87.5986 117.665 li
87.6484 117.335 87.6777 116.996 87.748 116.666 cv
88.3877 113.478 li
89.0479 113.478 li
87.918 118.604 li
cp
f
90.3389 118.175 mo
90.3389 118.455 90.1094 118.685 89.8291 118.685 cv
89.5498 118.685 89.3193 118.455 89.3193 118.175 cv
89.3193 117.895 89.5498 117.665 89.8291 117.665 cv
90.1094 117.665 90.3389 117.895 90.3389 118.175 cv
cp
f
93.3789 116.446 mo
92.8789 113.557 li
92.7891 113.047 92.749 112.528 92.6895 112.018 cv
92.6494 112.018 li
92.5791 112.528 92.5293 113.047 92.4492 113.557 cv
92.0098 116.446 li
93.3789 116.446 li
cp
94.5186 118.604 mo
93.7686 118.604 li
93.4883 117.055 li
91.8896 117.055 li
91.6201 118.604 li
90.8701 118.604 li
92.3496 111.069 li
93.0088 111.069 li
94.5186 118.604 li
cp
f
97.7383 112.258 mo
97.4385 111.918 97.1094 111.648 96.6289 111.648 cv
95.9297 111.648 95.54 112.228 95.54 112.868 cv
95.54 113.747 96.1797 114.157 96.8291 114.597 cv
97.4688 115.046 98.1084 115.526 98.1084 116.565 cv
98.1084 117.665 97.3984 118.705 96.2197 118.705 cv
95.7998 118.705 95.3701 118.584 95.0303 118.325 cv
95.0303 117.415 li
95.3496 117.755 95.7695 118.025 96.25 118.025 cv
96.9893 118.025 97.3984 117.375 97.3887 116.695 cv
97.3984 115.816 96.749 115.426 96.1094 114.977 cv
95.4697 114.537 94.8203 114.047 94.8203 112.968 cv
94.8203 111.958 95.4404 110.969 96.5498 110.969 cv
96.999 110.969 97.3789 111.119 97.7383 111.369 cv
97.7383 112.258 li
cp
f
101.778 118.395 mo
101.519 118.575 101.148 118.705 100.818 118.705 cv
99.0498 118.705 98.79 116.396 98.79 115.106 cv
98.79 113.887 98.8301 110.969 100.889 110.969 cv
101.169 110.969 101.549 111.039 101.778 111.208 cv
101.778 111.978 li
101.498 111.788 101.249 111.648 100.898 111.648 cv
99.6797 111.648 99.5098 113.417 99.5098 114.816 cv
99.5098 115.696 99.5098 118.025 100.849 118.025 cv
101.188 118.025 101.509 117.875 101.778 117.685 cv
101.778 118.395 li
cp
f
105.049 111.708 mo
103.379 111.708 li
103.379 114.367 li
104.998 114.367 li
104.998 115.006 li
103.379 115.006 li
103.379 117.965 li
105.049 117.965 li
105.049 118.604 li
102.68 118.604 li
102.68 111.069 li
105.049 111.069 li
105.049 111.708 li
cp
f
107.009 118.175 mo
107.009 118.455 106.779 118.685 106.499 118.685 cv
106.22 118.685 105.989 118.455 105.989 118.175 cv
105.989 117.895 106.22 117.665 106.499 117.665 cv
106.779 117.665 107.009 117.895 107.009 118.175 cv
cp
f
108.51 116.036 mo
108.51 116.536 108.529 118.075 109.309 118.075 cv
110.089 118.075 110.108 116.536 110.108 116.036 cv
110.108 115.546 110.089 114.007 109.309 114.007 cv
108.529 114.007 108.51 115.546 108.51 116.036 cv
cp
110.778 116.036 mo
110.778 117.005 110.658 118.685 109.309 118.685 cv
107.96 118.685 107.84 117.005 107.84 116.036 cv
107.84 115.077 107.96 113.397 109.309 113.397 cv
110.658 113.397 110.778 115.077 110.778 116.036 cv
cp
f
112.189 114.157 mo
112.209 114.157 li
112.35 113.797 112.629 113.387 113.059 113.397 cv
113.059 114.157 li
112.929 114.147 li
112.259 114.147 112.189 114.796 112.189 115.616 cv
112.189 118.604 li
111.54 118.604 li
111.54 113.478 li
112.189 113.478 li
112.189 114.157 li
cp
f
114.92 118.075 mo
115.609 118.075 115.64 117.065 115.64 115.946 cv
115.64 115.006 115.579 113.927 114.87 113.927 cv
114.4 113.927 114.11 114.247 114.11 116.126 cv
114.11 116.686 114.1 118.075 114.92 118.075 cv
cp
116.229 118.794 mo
116.229 119.754 116.188 120.644 114.89 120.644 cv
113.99 120.644 113.57 120.104 113.57 119.224 cv
113.57 119.034 li
114.21 119.034 li
114.21 119.124 li
114.21 119.604 114.34 120.034 114.899 120.034 cv
115.629 120.034 115.569 119.394 115.569 118.844 cv
115.569 118.245 li
115.35 118.495 115.079 118.604 114.74 118.604 cv
113.461 118.604 113.44 116.835 113.44 115.926 cv
113.44 115.066 113.54 113.397 114.729 113.397 cv
115.079 113.397 115.369 113.557 115.56 113.827 cv
115.579 113.827 li
115.579 113.478 li
116.229 113.478 li
116.229 118.794 li
cp
f
64.4844 16.3291 mo
61.7646 15.5498 li
59.916 14.9775 57.0342 14.0933 57.0342 11.8057 cv
57.0342 9.62061 59.6445 8.52881 61.6016 8.52881 cv
64.2119 8.52881 66.7129 9.56934 68.6689 11.1294 cv
72.9102 3.22412 li
69.2676 1.24756 64.2119 0 60.0801 0 cv
51.8691 0 45.9424 5.2002 45.9424 13.1567 cv
45.9424 20.75 50.3467 22.4146 57.0342 24.2349 cv
59.3184 24.8589 63.5039 25.8467 63.5039 28.707 cv
63.5039 31.4629 60.8408 32.6597 58.3389 32.6597 cv
54.6963 32.6597 51.543 30.8394 48.8789 28.603 cv
44.3115 36.8198 li
48.498 39.6279 53.5547 41.293 58.7207 41.293 cv
62.8525 41.293 67.1484 40.2007 70.3555 37.6001 cv
73.6182 34.9478 74.5957 30.9429 74.5957 27.0425 cv
74.5957 20.6978 70.1924 17.9419 64.4844 16.3291 cv
/0 
<<
/Name (PANTONE 286 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 .66 0 .02 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
80.9014 6.34375 mo
76.9863 10.1929 74.8652 15.3418 74.8652 20.6978 cv
74.8652 26.5229 76.9316 31.6196 81.4443 35.52 cv
85.6855 39.2119 91.123 41.293 96.8311 41.293 cv
100.149 41.293 102.704 40.5117 106.237 39.4722 cv
106.237 39.0166 li
101.563 30.5034 li
100.13 31.0786 98.5918 31.4106 97.0498 31.4106 cv
90.415 31.4106 85.958 26.9385 85.958 20.75 cv
85.958 14.6655 90.3613 9.88086 96.8867 9.88086 cv
98.4785 9.88086 100.042 10.1851 101.487 10.7437 cv
106.237 2.09033 li
106.237 1.97607 li
103.084 .727539 99.9307 0 96.5059 0 cv
90.7412 0 84.9238 2.39209 80.9014 6.34375 cv
f
33.5449 40.252 mo
33.1475 40.3022 44.8721 40.1675 44.8721 40.1675 cv
29.4814 1.11865 li
17.9082 1.07959 li
8.9707 23.0347 li
20.0898 22.8779 li
23.6553 12.4561 li
27.332 23.5273 li
33.6475 25.0283 li
33.834 25.8394 li
33.834 25.8394 14.5713 23.0659 .930664 26.7578 cv
.994141 27.0635 li
.994141 27.0635 22.167 23.9932 34.3125 28.3999 cv
34.4375 29.0015 li
34.4375 29.0015 17.4688 25.8901 1.60156 30.0742 cv
1.6875 30.481 1.69922 30.54 1.69922 30.54 cv
1.69922 30.54 18.1289 27.0645 35.0176 31.5625 cv
35.0479 31.7065 li
35.1631 32.2666 li
35.1631 32.2666 22.5322 29.1558 2.27832 33.3384 cv
2.37305 33.7974 li
2.37305 33.7974 3.5791 33.6338 4.7998 33.5947 cv
2.06445 40.252 li
13.374 40.252 li
16.2012 33.4395 li
16.2012 33.4395 24.6377 32.2441 31.0557 33.6729 cv
f
118.1 9.67334 mo
118.1 16.2251 li
130.117 16.2251 li
130.117 24.8589 li
118.1 24.8589 li
118.1 31.6196 li
130.769 31.6196 li
130.769 40.252 li
107.443 40.252 li
107.443 1.04053 li
130.769 1.04053 li
130.769 9.67334 li
f
4.71875 49.6084 mo
3.64551 46.0464 li
3.62793 46.0464 li
2.5625 49.6084 li
4.71875 49.6084 li
cp
3.99512 45.4355 mo
5.95898 51.7378 li
5.37402 51.7378 li
4.86719 50.0796 li
2.39746 50.0796 li
1.89941 51.7378 li
1.34082 51.7378 li
3.33105 45.4355 li
f
6.57715 51.7378 mo
6.57715 45.4355 li
7.52832 45.4355 li
9.3877 51.1274 li
9.40527 51.1274 li
11.2383 45.4355 li
12.1279 45.4355 li
12.1279 51.7378 li
11.5693 51.7378 li
11.5693 45.9771 li
11.5527 45.9771 li
9.70215 51.7378 li
9.05566 51.7378 li
7.15332 45.9771 li
7.13574 45.9771 li
7.13574 51.7378 li
f
16.1328 45.4355 mo
16.1328 45.9072 li
13.8379 45.9072 li
13.8379 48.2637 li
16.0283 48.2637 li
16.0283 48.7354 li
13.8379 48.7354 li
13.8379 51.2666 li
16.1943 51.2666 li
16.1943 51.7378 li
13.2783 51.7378 li
13.2783 45.4355 li
f
17.5283 48.2114 mo
18.4365 48.2114 li
19.2744 48.2114 19.667 47.9932 19.667 46.937 cv
19.667 46.0728 19.3271 45.9072 18.6719 45.9072 cv
17.5283 45.9072 li
17.5283 48.2114 li
cp
17.5283 48.6831 mo
17.5283 51.7378 li
16.9697 51.7378 li
16.9697 45.4355 li
18.707 45.4355 li
19.9199 45.4355 20.2256 45.8369 20.2256 46.9458 cv
20.2256 47.7314 20.0947 48.2554 19.248 48.4473 cv
19.248 48.4648 li
20.1299 48.6479 20.1816 48.7524 20.1816 51.0044 cv
20.1816 51.249 20.2256 51.4937 20.2432 51.7378 cv
19.7109 51.7378 li
19.6582 51.5552 19.6318 50.5073 19.623 50.167 cv
19.6143 49.8965 19.7979 48.6831 18.585 48.6831 cv
f
21.3066 51.7378 mo
21.8652 51.7378 li
21.8652 45.4355 li
21.3066 45.4355 li
21.3066 51.7378 li
cp
f
22.9297 48.5869 mo
22.9297 46.8848 22.9473 45.314 24.833 45.314 cv
26.3604 45.314 26.3867 46.5703 26.3867 47.1377 cv
25.8281 47.1377 li
25.8281 46.4395 25.6357 45.7847 24.833 45.7847 cv
23.5059 45.7847 23.4883 46.9111 23.4883 48.5869 cv
23.4883 50.2632 23.5059 51.3887 24.833 51.3887 cv
25.5576 51.3887 25.8281 50.7432 25.8369 49.9312 cv
26.4297 49.9312 li
26.4297 50.3848 26.3252 51.8604 24.833 51.8604 cv
22.9473 51.8604 22.9297 50.2891 22.9297 48.5869 cv
f
30.165 49.6084 mo
29.0908 46.0464 li
29.0742 46.0464 li
28.0088 49.6084 li
30.165 49.6084 li
cp
29.4404 45.4355 mo
31.4043 51.7378 li
30.8193 51.7378 li
30.3135 50.0796 li
27.8428 50.0796 li
27.3457 51.7378 li
26.7871 51.7378 li
28.7773 45.4355 li
f
32.0752 51.7378 mo
32.0752 45.4355 li
32.9307 45.4355 li
35.4883 50.9697 li
35.5059 50.9526 li
35.5059 45.4355 li
36.0645 45.4355 li
36.0645 51.7378 li
35.2178 51.7378 li
32.6514 46.1426 li
32.6338 46.1606 li
32.6338 51.7378 li
f
41.7266 47.0332 mo
41.709 46.2563 41.5176 45.7847 40.6621 45.7847 cv
39.9814 45.7847 39.5537 46.0205 39.5537 46.7622 cv
39.5537 47.6968 40.0244 47.7227 40.7402 48.2378 cv
41.5176 48.7964 42.3115 48.9624 42.3115 50.1846 cv
42.3115 51.3101 41.7354 51.8604 40.6357 51.8604 cv
39.4053 51.8604 38.8555 51.1963 38.9072 49.9663 cv
39.4834 49.9663 li
39.4834 50.6646 39.5361 51.3887 40.6621 51.3887 cv
41.3955 51.3887 41.7529 50.9961 41.7529 50.2715 cv
41.7529 49.4165 41.1855 49.1714 40.2783 48.6128 cv
39.0557 47.8623 39.0039 47.4873 38.9951 46.8584 cv
38.9863 45.7676 39.6758 45.314 40.7051 45.314 cv
42.0146 45.314 42.2949 46.125 42.2949 47.0332 cv
f
45.0947 51.3887 mo
46.4219 51.3887 46.4395 50.2632 46.4395 48.5869 cv
46.4395 46.9111 46.4219 45.7847 45.0947 45.7847 cv
43.7686 45.7847 43.751 46.9111 43.751 48.5869 cv
43.751 50.2632 43.7686 51.3887 45.0947 51.3887 cv
cp
45.0947 45.314 mo
46.9805 45.314 46.998 46.8848 46.998 48.5869 cv
46.998 50.2891 46.9805 51.8604 45.0947 51.8604 cv
43.21 51.8604 43.1924 50.2891 43.1924 48.5869 cv
43.1924 46.8848 43.21 45.314 45.0947 45.314 cv
f
47.8955 48.5869 mo
47.8955 46.8848 47.9131 45.314 49.7988 45.314 cv
51.3262 45.314 51.3525 46.5703 51.3525 47.1377 cv
50.7939 47.1377 li
50.7939 46.4395 50.6016 45.7847 49.7988 45.7847 cv
48.4717 45.7847 48.4541 46.9111 48.4541 48.5869 cv
48.4541 50.2632 48.4717 51.3887 49.7988 51.3887 cv
50.5234 51.3887 50.7939 50.7432 50.8027 49.9312 cv
51.3965 49.9312 li
51.3965 50.3848 51.291 51.8604 49.7988 51.8604 cv
47.9131 51.8604 47.8955 50.2891 47.8955 48.5869 cv
f
52.3291 51.7378 mo
52.8877 51.7378 li
52.8877 45.4355 li
52.3291 45.4355 li
52.3291 51.7378 li
cp
f
56.9629 45.4355 mo
56.9629 45.9072 li
54.667 45.9072 li
54.667 48.2637 li
56.8584 48.2637 li
56.8584 48.7354 li
54.667 48.7354 li
54.667 51.2666 li
57.0244 51.2666 li
57.0244 51.7378 li
54.1094 51.7378 li
54.1094 45.4355 li
f
58.8652 45.9072 mo
57.3281 45.9072 li
57.3281 45.4355 li
60.96 45.4355 li
60.96 45.9072 li
59.4238 45.9072 li
59.4238 51.7378 li
58.8652 51.7378 li
f
62.8525 49.1196 mo
61.0723 45.4355 li
61.7012 45.4355 li
63.1406 48.5693 li
64.6514 45.4355 li
65.21 45.4355 li
63.4111 49.1196 li
63.4111 51.7378 li
62.8525 51.7378 li
f
69.4414 51.3887 mo
70.7676 51.3887 70.7852 50.2632 70.7852 48.5869 cv
70.7852 46.9111 70.7676 45.7847 69.4414 45.7847 cv
68.1143 45.7847 68.0977 46.9111 68.0977 48.5869 cv
68.0977 50.2632 68.1143 51.3887 69.4414 51.3887 cv
cp
69.4414 45.314 mo
71.3271 45.314 71.3438 46.8848 71.3438 48.5869 cv
71.3438 50.2891 71.3271 51.8604 69.4414 51.8604 cv
67.5557 51.8604 67.5381 50.2891 67.5381 48.5869 cv
67.5381 46.8848 67.5557 45.314 69.4414 45.314 cv
f
72.3379 45.4355 mo
75 45.4355 li
75 45.9072 li
72.8955 45.9072 li
72.8955 48.2637 li
74.8516 48.2637 li
74.8516 48.7354 li
72.8955 48.7354 li
72.8955 51.7378 li
72.3379 51.7378 li
f
77.3291 48.5869 mo
77.3291 46.8848 77.3457 45.314 79.2314 45.314 cv
80.7598 45.314 80.7852 46.5703 80.7852 47.1377 cv
80.2275 47.1377 li
80.2275 46.4395 80.0352 45.7847 79.2314 45.7847 cv
77.9053 45.7847 77.8877 46.9111 77.8877 48.5869 cv
77.8877 50.2632 77.9053 51.3887 79.2314 51.3887 cv
79.957 51.3887 80.2275 50.7432 80.2354 49.9312 cv
80.8291 49.9312 li
80.8291 50.3848 80.7246 51.8604 79.2314 51.8604 cv
77.3457 51.8604 77.3291 50.2891 77.3291 48.5869 cv
f
81.7627 51.7378 mo
82.3203 51.7378 li
82.3203 45.4355 li
81.7627 45.4355 li
81.7627 51.7378 li
cp
f
86.624 45.4355 mo
87.165 45.4355 li
85.4189 51.7378 li
84.7207 51.7378 li
82.9658 45.4355 li
83.5586 45.4355 li
85.0527 51.0742 li
85.0693 51.0742 li
f
87.8184 51.7378 mo
88.377 51.7378 li
88.377 45.4355 li
87.8184 45.4355 li
87.8184 51.7378 li
cp
f
89.5283 51.7378 mo
89.5283 45.4355 li
90.0869 45.4355 li
90.0869 51.2666 li
92.1738 51.2666 li
92.1738 51.7378 li
f
97.54 45.4355 mo
97.54 45.9072 li
95.2451 45.9072 li
95.2451 48.2637 li
97.4355 48.2637 li
97.4355 48.7354 li
95.2451 48.7354 li
95.2451 51.2666 li
97.6016 51.2666 li
97.6016 51.7378 li
94.6855 51.7378 li
94.6855 45.4355 li
f
98.4551 51.7378 mo
98.4551 45.4355 li
99.3105 45.4355 li
101.868 50.9697 li
101.886 50.9526 li
101.886 45.4355 li
102.444 45.4355 li
102.444 51.7378 li
101.598 51.7378 li
99.0313 46.1426 li
99.0137 46.1606 li
99.0137 51.7378 li
f
106.598 48.9185 mo
105.323 48.9185 li
105.323 48.4473 li
107.157 48.4473 li
107.157 51.5981 li
106.598 51.7729 106.013 51.8604 105.42 51.8604 cv
103.368 51.8604 103.517 49.8086 103.517 48.5869 cv
103.517 47.3647 103.368 45.314 105.42 45.314 cv
106.625 45.314 107.243 45.8286 107.218 47.0503 cv
106.659 47.0503 li
106.659 46.2212 106.301 45.7847 105.42 45.7847 cv
104.058 45.7847 104.075 46.998 104.075 48.5869 cv
104.075 50.1753 104.058 51.3887 105.42 51.3887 cv
105.899 51.3887 106.301 51.3193 106.598 51.2056 cv
f
108.412 51.7378 mo
108.971 51.7378 li
108.971 45.4355 li
108.412 45.4355 li
108.412 51.7378 li
cp
f
110.209 51.7378 mo
110.209 45.4355 li
111.065 45.4355 li
113.622 50.9697 li
113.64 50.9526 li
113.64 45.4355 li
114.198 45.4355 li
114.198 51.7378 li
113.352 51.7378 li
110.785 46.1426 li
110.768 46.1606 li
110.768 51.7378 li
f
118.257 45.4355 mo
118.257 45.9072 li
115.96 45.9072 li
115.96 48.2637 li
118.15 48.2637 li
118.15 48.7354 li
115.96 48.7354 li
115.96 51.2666 li
118.317 51.2666 li
118.317 51.7378 li
115.401 51.7378 li
115.401 45.4355 li
f
122.008 45.4355 mo
122.008 45.9072 li
119.712 45.9072 li
119.712 48.2637 li
121.902 48.2637 li
121.902 48.7354 li
119.712 48.7354 li
119.712 51.2666 li
122.068 51.2666 li
122.068 51.7378 li
119.153 51.7378 li
119.153 45.4355 li
f
123.402 48.2114 mo
124.312 48.2114 li
125.149 48.2114 125.542 47.9932 125.542 46.937 cv
125.542 46.0728 125.202 45.9072 124.547 45.9072 cv
123.402 45.9072 li
123.402 48.2114 li
cp
123.402 48.6831 mo
123.402 51.7378 li
122.845 51.7378 li
122.845 45.4355 li
124.582 45.4355 li
125.795 45.4355 126.1 45.8369 126.1 46.9458 cv
126.1 47.7314 125.97 48.2554 125.123 48.4473 cv
125.123 48.4648 li
126.005 48.6479 126.057 48.7524 126.057 51.0044 cv
126.057 51.249 126.1 51.4937 126.118 51.7378 cv
125.586 51.7378 li
125.533 51.5552 125.507 50.5073 125.498 50.167 cv
125.489 49.8965 125.672 48.6831 124.46 48.6831 cv
f
129.791 47.0332 mo
129.774 46.2563 129.582 45.7847 128.727 45.7847 cv
128.046 45.7847 127.618 46.0205 127.618 46.7622 cv
127.618 47.6968 128.089 47.7227 128.806 48.2378 cv
129.582 48.7964 130.377 48.9624 130.377 50.1846 cv
130.377 51.3101 129.801 51.8604 128.7 51.8604 cv
127.47 51.8604 126.92 51.1963 126.972 49.9663 cv
127.548 49.9663 li
127.548 50.6646 127.601 51.3887 128.727 51.3887 cv
129.46 51.3887 129.817 50.9961 129.817 50.2715 cv
129.817 49.4165 129.25 49.1714 128.343 48.6128 cv
127.12 47.8623 127.068 47.4873 127.06 46.8584 cv
127.05 45.7676 127.74 45.314 128.771 45.314 cv
130.08 45.314 130.358 46.125 130.358 47.0332 cv
f
.5 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
146.169 68.1094 mo
0 68.1094 li
/1 
<<
/Name (PANTONE Cool Gray 8 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 .01 0 .43 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Katie Linnell) ()%%Title: (ASCE_LH_addressblock.eps)%%CreationDate: 3/8/11 10:56 AM%%Canvassize: 16383%AI9_DataStream%Gb!Q;kuo%<ZKQ];^Om[h$jO?,!Q&5,!+CU9Kd=Te!sGibD:[G,r4((%<@U`!m`EBGp-(G2^pmQ"PtEp5Ull(=c-C\5ri,k#g%j6?%hU9*MA(l4_Z1G-cjpHh0Vit.7>c+<dNXH"`^./++*NN^c[S'qH9"(jijLna[mesQDmN6R5GHG2Tg3Mq)Hcu6M5L"A#^\L-d2"OeN%Q^?"Tq9>8gh/f_qfs,H6:G8h>Vu,37kB3o&!Dk^m2W(-5mLS/]Dd2&Z4D>\KjpeH`X@MP"e\^2LhJ(l\]\g2Y8>WHcSQGBl#7oT/%qY+^)h^9EfR-4m?eb<Cbo?)'C4/s9J3BX8'%F<-tk=N4YKN1+)Qi'mnq+okbB@Zs]?0-K4EF(.U:0o.eRLr[?IAG=&b=nm=V'"3H%s6$O\=q=EBI^e![lEn=P1Q$99Dm.FREt8IH0Bk/[L/[Y:M[Y_D5@);030sTmH@:-Sp02W@:!LeL^;E0<#r3RoWNI0d>LRCD/6^0@%H]CUFl\=S"-l/+9hYQQ;p%L3ZkI[X8^XIPJYr[3B_bmRYqkm6i6\\=E/5=%>puLN7V:@_E5P7Sa.*0G1pH/,OQfYk'hJ^%`@1Y<m%?^JO4^mA[-U"(NLgNe&L!\NRuh?%,\^#hP]/ogqKE;8"!J*EJ%N0d5d1#4#.mo_^;0^5NE>@(Vp>sD-G"57c$6!VgKc@9=;:a&fY%gAs#i,.r-PI<p-Q0/G08S#u,-^#V]8+N$s(+_Q&BO3`:eA((1%^XZpZ+9GHsQh?I1fg!F[^-!$rBfDXijiC8\U%@gr_.Ah7::o*D%2[S,[8<:2`s2o9Zdg&1da?S.,hi7fRI33o>WuPlCn7e?\e26-`C#[T2"5_&,*!](r%X`=;.-3Ebb&J=/?Dm6Z);g3)55>G%q`^88%I4,8K_/C`%X[9"%(#H#miCUEaAJu#&g1WGU]\R8:o0ri>6&ZC_`!9MbVsl$_DA%@$^S)A6$%>5jkS*D65(aomD^Y]NK&=pn:'l:a%q?4Rl)tXDb6VU*!X;Q<e^S0QS#uKh![#*;Np7W2m$[tI27K[%GHiS5`0iAU_"MaJ$loAO9\0GnD3ag7RLmPo,:^[%(^S)to60pHm%_\%Ms-jBS0,E,U<GG0NU)nnW,E;\ZR@L`tE%Af_In/Fk0\HM/Sm6cf%#68hj5CCZd5GU?)6Fq0J@*]F3^`;m]G-PXC?<DgZK/1e8%cC*$@GT2!h:SE:-)bM9'6iW5ppb)K!1=3X<JTE`9*Ma[`JDACpR.C[J2S^:m"aP[B"Wp[=4(<tEa**S_J2n\`hD`@n9(CK;G'kC(%j$1I%,nmg,`uJfG2)OM]jBjA'peJ!-V,^,'Vj$1ijDN9;P5jHWa[9=]jX>1"bAdN@3$mO#8I^\1a-X8np#;IPY0hagM-<bhrsT"%%aA;^=7L]:<:]-P0&<DYHPFqWrFn**A`.+A6h`[%0mBM/+$9jTEpht3e^WTFNQRgR##a(bSY?o9<ne;%;iZIH,(d%MPj,2ai2uFs"%1T[Tf2ekC)<#QLDr-/\4P<?+lVruW*NA*U,IuK+fYq*ahq6U8B"1R^LNCL.*>HdhS::O@"KQ2ufYLXibC9CSb5;i7NC8=6l2kZB9%rN!3d8f=B)5=WO84jrVG's4GNY)U(gb7_kI,1NP#Q5KNF4gIWU<0h2N?0E_"je$F]4P-9,!NQZY_V<^$Ph.D;+/Q]-GA-FoFiiD2%_3W!2G(j>08a30OM=qng,%RKZ0'JMi"#Z7NknmuY`rjIR[N5$NRgR.I1a&)b,;lc(NMTS;'DP.?@DjXE$AI.\n3`r_KX:3/H3;3X%NaWpj5ehkr=tQ^Qp_.n3@I=0Y=Z@+l9n`tD8%2nNmWO<R@go9P?\l=Ys"GITS)sBQBhg@]0PrGb-d\Bu;:Bs?9S,=JO/a3Km5L_L%2!7_AB%iRI2O-r@`[e(_kTA/YW)L%96/"3$&"YBM7HJlHbBP,YP5LO.&KBd4U]`*%,EOH("s%ohJ_"a:/$FYB2lIK<s"4'd5:t6d%J3._1TQrY,;E\Z^7O)/iipKZ:<2!DR8Q#W"0KT:n_l%G*W0+uoTk;3<j.<31J`]3*L1=f!/8B=^MNAGeUkJFBUq8?`43&O3B@aqi%$9S>I:(,EKrm5g,.OU"Q@#\pB7SrR5&''<`W[_MMD1jXa1%S6a&,$@aJanc_1$gc"QPb#c38S(]0XW=P&!fh]LsW,q'^#fQ+U[%W%G$C<%;14qo"7dP`Bj_60CJ]Y77RitDP:qZU90&I2?r4SbT,DGi;Wan]em0UEU%.fSh-s7n)L%3W\n2R7>D'%#Y>JIA;&g@H'u?Yd%E4cEu$`a00^B?TQO#_[PQ7.X=83PBs<nC_0d'fTh#-WT<Mo0B>P;10R-?!Tp5B1EGg8.nZ`gr%mK,T\^A>FAq%i,$`h<#C\;%7*j%U,!?i9f8qLV)==@7#Kj-WO@bOE*]BuI>%MgIj2Q.[R@O('^I0NPA;W:THu^gcXAF>XWN\/_`BZh*qG&>r\4#r/@Y'#?k(mP\&_Hs%a<16eCq7OOYJU06Hk,bH#X;>JkX=;oZqU+^L,1B?cKIgri:RB$!oH;hROF68EEeE#0[e-U\fpLt5mgM[J6P,DFWU/ak^l$,FiE6k%c9PU[L*,Z@Ju?_*nmE4OD5Sft,A]HhW=_0.Ac`_),<ml?Q(LSjBZI"18,X3%?tM\Rq2%8O;',)=D,U06n%anA1$D8pNono/OAdSE%;m3^Z?sYMXQ'@E/IM9r^6^jBO1>iI8CHjeR7GgD=o-*C!E3;kgnWBG_,_^+BkWnJN;A!kHFWg8^4c97dHF\Zu7=+&aF"@!R32`eq%=jd\u'AJ:^KDOL2>K0tL*C.>UMqaf\b_O?%K@CGrDd[HOrH%NG=R4'(PfnIE88f-t()ZpRO)Q(i7hJPr8ME"Jk@)-92W[!HY&GK%%Z_F603@@*CehGC%(]_Ts/#/Ei1e0&JU-eF7`H<$KQCO?sXlqOc;048]N?jK374a.J.5b7mMFO;61b"u28,=BL`!3V/oh__<%i75H%3?DfK#iU/e)Sm9[TTK1"&&R'TK&E%,baUj*d!mU`'9FJJ%ANf\MSM?jUBp]Jgq1_+fr8"/fj)K41_7V4C=1aiH9F7ZNq#4UiAIdo%p`)9)<7JFYjgg&a]MUtC(Zdre#[*-Z;Uj1F=Bi-rf7YN?oPRdNdRm.OKKTB3*UGMGja%W-K8(>pCFSnY"Qu#kDc7NhV#0N,lerHl%jdB%mD%+E,0G4dt&3\oaBaB1YBFM::)*DsWOf3:tFpr#aW$_WbO8_l6g't3I6^ikWT=Iah+9Tgh;ejis43@"))L2k%`ADV6Fo8&b%WUm'3n-==jl>^N[`a&s9VcL.?]sr;9+^3\i+/n1mI>oicg(\[gr.2<^nU_jY]NL@<'%>YOZ'GEXe+aXISLpM@oLcqU[+Pe@U#Y=5%M4^r3[KlID)8cZe6%!X@q27.:!MSo?F-L/3)s?p&a7(O*U0WLLGgj!0:#*`hQs\n)O]+C^lg\ffQH-'NYm!r+[t"Sp&$S@7!e"72%6<!>S5e3eD/W5qIRY%Ntp`i!9CLD^3^u*'J'&a#:&&;CG/&X,T7#sqhn-;dX7Li)nLM%sJl*4A-Zqp@pM="]qU]VBQ&\J5F3ET-p%*BoU/36S;J(^%fP_2\/=H$cn4i5"SC>P<$[2,P%V,.)0mZ+ps8UV^jr]FUc.B8mAe0D5^pdIDeOC'1sLho(Yo3[rm4ln>7tmuRAL%RT#+=ni>-UHK,dX)4`19cp-k9nf#MNq-4=)MK:X9&f%4Wa(@Io^+^4Pmmo=uT3,2SH8LR>4oT>O`OV'_89r(O(/c&tb;B>CEuY]c%:Q>O+U:805(Faq&d]jr:!l`aO1Ge5(Hdf>RPYeA;`45AaYQd]M7Pg\j+'3iMrPlAip54nNN]9QNatM>eAZioD('p@/Uu]Z289N'<%3.?iZUEOSBDF*_(,ooJtA/XOP>d??>J7#Qf-jT??Zir/KPVShC)2u9hg,LR0jC-?W`t'm0#g+dh"%oWl`:sVi*dg@9Y<e'I:,R%@%kSdoi`s2$]-@\3O&*aoo:6bJ%>8#uB`Y\7^[_XqscJoDeU,j6%F"':kk4IZZ4oWR\k2V*,_.h,+AP15F9cli\=p#@P75!T0i/0Ll%#KK;Al9UphJ?tcDZE]ZH5oU9c/YW)snIEGT[>N.C9)bLrn4Y/.\%WjlAKs+mci:kk)./K7#C-LF=G'$l4Rl#C[QlLqR,4uSgOt>F%J6"YMdr-Xi*q]k[T&Y]N<;[\H/-om(.NUjc+3;K^f8o$%]\OL7:F22k&Jldf*nDsui%77Lr4?0#MpL*F.BgQp]FQW!ou>FYf,0Nj%h@eCE@B2onSO\PTjqX[3:osfBEXe&:r8AscGLckV%oU3>CK/f8e:PACcWM:Z?+"!=8nbE\aN6AOO464q/jA,Oip=3h$*dCc"<8^G%FM-l5@Cn#(#jMRs7L5n)EXT:X@N<<'f<H.9J#"'XN+F"d1;#uU7=a6bMB!,`R2)hIc1)&:(9ESg$+?_^#4:+KN]TA26-I_4fJ`Xr%Xcq:KW:*?MAu!eiZ0.m6j3?FhrN+ASpo"J1`99guA@,3Fbd19/Oj_)'6_*4N6JL-7Pm;nN`-YAOj>^&_ZK^+dfa@10s/&Cm:bQn'%VFXc/7n?5kUJtO<QHKbapRI\3"s5KAPmuK7V.D=,QV_q/VXab.ZfD,c-G1]T!p(i&g\?`:_^%_1G@%VUUUZ6hG[3p^W7<q<_J+gP%O,o[h*]@bU0'<T9f@?#DQugNhgQ],))d"'1cD&`.V\@K`E)S?EZ.(F)WoXcCkGlOa&g95>)/C4AVS-bM8lQjp/ZGB/M=dQ*D@P5W%@I(Gk%U2_+'D'T#[tF&Nhbs-XYS<(ir>'XYnUE2kB?8j!.R@5A/>f)4Yb3mkT?U#./lUZ%r.I-K)84[;XG?YEpKNZfB?><Bc\\*l%Y^XX&""T0(9SMjA8u>2_hA[AeVOF+L=_c;EQS)u"\Q?U_""D(cE67]&mKoiCM!GO>^XPX+ilUpprY9grkfs&-e1G+^5WlRFU3\!<%l>o#X[b[CViW6Wh<_qpg:?;[qgZL_^(.\(Q=XdQWVE1UZZN`9nH_@!e7@fFHb9]jU6.Kb6^0I^2*Jf0$oLH,*k;B*61oA1Tc?1eK%<Uk\_!hVcZ>".O':(=UT;Gt%_:pp4o?:K>qa-gGY20+e^_f)8KWU8\`3Sq,S`Ih`n7U920NW[?*pQ8G`/9sqIdSRIZFXkuK38V;s%7>!C&kE39)&&`]e[:>BRbhj,0bMR)kfs%\72)5-6WM?>*227ss-.0WH1;^Ztq:kg=Ybii%iL5UM+"G6_DQ@b?aE4H.Xg)(tR]F/r%C;V=!\Y#hc\_q]W>\LWt(SfVpAL>4c\Z@IBU\Yr@gCHmWf#r8P">O!NW@Su.EGSje+_'ecea$/S5dbl"@mD'nMC1!iR$[S6X3,pM%=H?pbK-%)/U9<c3WEW?Y;n550L^LK`Pu,[N=7Ar8K&AQ?CVHYjl6,["WW/C,<Kj"d;#:WMh\4MJ\/Z`sL!(onYN^1$,?fl+n5%<5%nSQD0daEB+loCCSo^ubPUdbi?%j;7[l%5A(G%#;&/;!d4WFa$WM9fXurO1c8bOJKnqkE2`j;dDuWh.UgrC.1I:aM.FR//0(*10N^%q#Up'W]!mMM&7N\8!;U.1%O+,Y=hV[03=1;o\gO6&c3jKN(Nu1p01uBUpoE1nJ:d?TN=DeXP0r;9MCJ!C:R^VXhGB!CI)ec[@S@V%<=9!q<LH_VPom@ZC:&b:VhiJl>6qiM0\.^9)EEG9[>=9/XX\W@UDd7;0'5Q<7(=i1F%Ik!gcgX!(E]EF?=U;*1HD3*1d$4cC%0e^%:kLJ!*Ji?>q\ad6H@:Y\5qC$]$B.G[NWkIG.<_6?*f+"h?ItQT.J#ppnL8D.GasV)0fDrZeD'_Z*0#GJ40OaohW&>!8);H`k5h33%^Zgs2<r`+-'>Wl,RtD2"rR?S/m+_ViinYTf]TYiih9PoP:A\*?2cmQYgpZc\\r\B@O?^DVh7DpukN<[IrcS):e8LV@:N,i]'fB<d%h,YR=P*bE7rgEb/XnAaDI?gu\[,1e_p!S+aWYLV-q`]MWm(T;tIIts(2nO>B(H(YErC*;7$&rKO&sf6>B)aU#q9j$8pI(SI2-:s;%dd'!.K=q%uI^Aq.Hd%!(FC%AC_+15C#,Y3Fs525D&Ug@$fL>oO[_rN+>H2fBs)kH*dd\oNL]>W,=.:ir:Cl:DgZ-ag<!*`Y78*Dl%(rlF8osXJ_e9dJYUd0s/h>YmZ9C)5B?GH0%<#\Zof2MR<0HsLX'&1^t)k7"o5CI@^[:l-0`s+,@.OqfDLgj=`hpPE.:A"&_*!t'n%kG?_PQ$:uR^YABRI[P;\h'(i-+#I>/q8HV7o]c%.oR]6VnqT6-A=.YE"NPMHFSO&-o?TFG.#=2(r.f[q9`Ff]5_%t!r-nYA]9^2Z%d*!)+md`PC7P2!1bEn%u,bH52XpMK2rmLh<N!a>5RQnpadm8.5,GW:%6cha[.Z'B^l(dB6Mb"pYioi9:GA[h^eB8;k-?F9q90C1J%JH(lBT56l$b&jj^nE&#j2l)V3:!l,\Md\SYO*!c1YQ=%:!i*!"Y2LUi/#_V10JKIS"H9=MiQ=s=5sOD,beFfTJo=G/0Fl@q5P4j.%omZ6+l2<Imca*X14DR1;Fm]S9Fhr-d,C&Et;%Ie=o'Dk`,0<@2<j1'""7+5GhC[Mrq=7+Xq3%?p[]stifD=#^Dn`m-LRTtKUf'GW%7YJIEmle@u^JOX>,'pu96e\4[LhaKf1qWMX4#j61<'d.oO[PIPX'$TOqMS?\Y&n*bC#?GA&.pAM\HD3^,00EeG$5LV'+ZcPI;^05%Ze3)`jL[io_2&)VY:+6S1CRR0oLshA3;0?)ri=_)UPQ.=A)!k$gG'm9[o"CpFMI!\Ij-,em'fO%(-O?%Z1)hHF8+I8n)ke>/#%jR%@UoIkr>)XE-V^>A]2/GoaffXa^0qtHiPd$YOP3p@XC]#GHRrlG!B^kLqelVbA5!E.AthrP]f4qn[dX2=(d-Uf%cV"o`Bo_JF[VJ>%V3Vjedf\VrAYVo2c7c;Lp%.kRVge72l/eoE:QUd8"Dk9pIX#cp&6Ge$`^_^6^7qmh>Gof'lYtRl2=L!$4OPJj)aQ)(kl'77M33fa%8=-o]pKj?&kBSZ]Q(<<a^#'D(`lRC:qWM,^QV\2u>&<FV1AN&W\nr'mr@W]LeQ3%6^-&f-q*#tU+B>1/')U+&DY9/#hn;.cOT>R-%qCaU3%tp#nDnPW!lho;u^4E_(0?iZ]M3oNe*p0%E4,s!$(I!Z<X_s3L:S(&?`6D&lhg#ZG7HO'+c<KYAPGa1+<M,R1p\,/RY)ZKM%A@2@/qU-^OQUmIS:Ufe@:*`8*rk#4u5lF<S]>ph9qedp[(\gr(ec4fl&SLNA]6Da$p%O>!:hn+e,TS>H(K7IgC`>a;(\m^mVf-DO%ou-j-pU^+iFP"[`m8REhc],4i1m5sPlj.5Bh2.!=LqOBJ?`*JXT.I\Ok<IcAh/\=<jnWW(q>9Ejs-TWQXPeT<<sG).=OP^=p$/dc%g,_m9Gffu)^UP;Cld.4@>i=&jJWj6J2Y^$jebS[aH`*G/mTk_l5ataWrqd9'p%SK(/PL$K?d3KW^Y%3<#H;eA6mlht#3$1<OspCV%Vpd)jQN#3FO1BG3*J^rS^DAX_L$;K]hg!9C5C>%<;GU"BHiII@DG`^7USh#i]0uUIP87C%.s'mHk^S0NqeNaoKLmjc#`7jAO./<c%(Bg*),#nR%A9i%bS+gHL`l5h;'9<YdW0i:bQ,3eM*qEU7Hf)D)p/Y`b?U!]GLO%+]AS!;JjklW`dTu#>,,7H0LC;N!:%RHmh!KZ5%c%f?/fmZJkY4qkdG5K^(5L1^OentB9lLnE.LMf$JG\E40RKg\"iA^QO$J$^OrWoPfT0'Ndrg!fS%KsHBI(LW`>PY0T%?YdZ:Rn(4%CBVf>J<@&%,V9;#iAFfI$B_hJMo;0bOZ54U8;grAZ$_Sj_bE"9(l2g7l)ejprX!&4Y^6?Pgn?uR+S^mKm6Lje(1cAM)Q4+[PYM9C%?U$Tr8cpUa:P?QiLFg_rWl@&!>%+\[`5:NO;@DAS-eF/`I/DECD*l<$:g$c^]9b,^qDMd95"*,3aX%+3hniqI$"^aCV+qg4dS+AH%'`:Bhn$1@?+"V!DPbN2oeqLINBU*!#dX3Q.Ah<[X4Do'JYKnMhPDKm`c_Nkj$g>n7H?s::ItnG8s/F?%cq9$5Kf1N/htdNCX2Jmb%;$Zdk7$L\DZ*(C2S5PS(dG,A$/qLO>i%;n!42660?<Y,?R1&aNDjedlAWS9,BagN9W*jF]H7;JulO8INeeuU[=D'%a@NB%GJpi%8%[;)6o]!@G@`P:.*df%?npK+8`,j]H_'%eh26$gXhd45gj%*LbM;H2%c"""!?<pGDS'%NdT,p0Fk/lI^DY/'='69/<*MQ`-Zra&F\%or(`^`V@k^Y8?*eh.qkNHelC7PGBjC_+t$8eP.1]>F2=V"MQ!imVu_?1N0u>a_diDU.BCDYi:P>6.NMLlPEDap\EQno!Ro7?\!$g%MBhT!#IcMmqB&$M^6"4C,UK,q?.R<foEB2l1jcFem501<I7Uh-U^XRg\e\MMGLq4Vn[_WA-.jk%o_*>":BH="13`+l&kPZ_rmQe:%:EisWojHZP8f=Y3d`bCOX4/P^;1f%,,dL,4rKd3#N7M5eA4H*PW7u3^_"1/LdV_3)jeeGJ?/"_qLgEE9(EG>MPG9*\n=X\ARq)`!%XO'J'$E@Vqb,Z_40sHEU:3R?F/5Z^thX2#($sK<jcuiOMr]P7IO<DC#oje(mD>i>*bG5\_l"7QP2h=BCDJ?(,2,'7GjO1TFdV1.[%dCLXq'JdM=c[VEG]f8.N2P:#m8B-J>L5p@(NTd6q;bjtgY+jI;O@aSYl$eOc0ET_(Jbj`l(N**Kqp-in$8LKs<aLe`Q?V3RJT<F2%bXfEYo?cG2*&d>Am`!kl-b,"0nHIB6$:iHcA*k\1<89apd%WZh;-<Jm'9";Y!ILpoNu6,SW*&-In\3P#H>"fBJgcouJX0NKka,6n%/ZA/X@_$(]VlrtfQO5CL6stc*qPAmU-p/dEA\a9>,sn)e[+MTLA0%aBW02^6:1S$)C$N)$=)4FIqpX:mWtLA.W>duf,^=+5\WpA:%N$-2YbJE#;J2QbHKc]bs\MCs##XfsgVq%=Yc`XZ@m%DqhRf1\eY+OU;[;p9%=Bp@BS+)bQI6([m`Ih[j(O`MsY(,\SepdF!ceBO:%<h$L(g=;X:C(s`FSB%USF*i%EWB>Nj.ng]0Sj,pa>5I[:ioBK+pt@-aHTq78orVWpbaDtpZF,/VF%tEgq0="Mnqq5._M;<q]D5bd%mdFH2G'BfYq:"&=WSFhhm?cT(TA%nO]hJd;D(c]?lc$p1c(>6\WOodI^.>up/Wo%b?ce3r<SE<n<LnUaYcX6LIs^<:XULh&QPN>t%T!@IsFke)RK?aMg1P:DTHJS!]mn<E0f>Sc4Cn8kN]t.oXHX<IsDZ&]\J(3mNl>8fI:f=Cl?0cn_21+dG/mD6r#qEW:hH+X=o)>`g%VKe<6YA1mC^NI<[Ili[.FNaVk0CSfeKc4NNl2I&1fV?\\2<m<kDAAlbrA6C`mHK=BFJDA&2f%,L?H<kUqV%EEgg>qQe:*p'c<f%r%)muh$[>),o+)7%I6CXN`gcI=[ao"G(UKZ^$74kB6k<n4lZr2`roV].jiTh@q-*"/t>>#pA41D'0aAMp0]BQOhO(N#lj>C$80DDhN%IA([cVi="nCfIULhi5qed-1DcW0XTgebs6F1hq.;=R!l(7VnjnbMdP-<sUZ6)JsYIHn:f.1toH\g9ZeWfk@S[h$c/5>JXp\Xj6T>%-b@]$drW3*pL?.^dI-m-]eD[[If2F0;6Ag/alpe;ebLn?HJVqaDUc8oXu3q3T1&Bp]$X_24I=AiAYZefdd5QEqa#%nZ`T"B_jI#j%Q+O`=UD[`e@=Z#2%3dIkm`*a?C"@\?pN=g<]OHk,/^8tfF\_\&c`tmo\*$5RVdDBi^$E6])^To0qRZX'k<=ATFs7m]?g'\m2S/F+%;m!tpH9G%`q/j0tMsTd%maAT#qpo4@ZI.-jop+0!&&)n1hNX!4*Xaf/e]qe\^$%r[5.mLOgtmC?NLoV'S_-DQKsRoPek97TGI@$$%F!IR0p%e2$(I'F4NF&^D0$$N(\-/;7\Z,3S@N,2WC#9H9bXXU<E;8r"ZM%uUW_kN(hts81fY5'@'gH$E2;6DpNrOKaDY.mX^3a/M%<GA5=6Fa5lhb-^<UYb^o`IYIQNAd^3>="rcn%N.6>L7%<e7c#3o+"!dbl;p;]ckY'G/K==>WA-[NB[4I+\VE(gHVoVUW2ZSgifpL%;RcDiq#`Ib"?[H#&::7QD]bJRBlp+/TF/GVHu*nQY.b_smo6-'3/`cFmk90VNTLS$_"23XQ0m,Jctmu('qXY_mbZ"AUs[2/\C'`n%qE/P8q7%.*l1WeBiSu<>BWbaGTC)"LqYK0^BA[#;6)3.a<]]_7:1*^UG=\LKJ9L?]DVJgCK)$kfPZd'bGLN%p3nsQ*3V)S3k0tbq%k?G25o5o.MDt]2T6p2h@claCr<+0jF#1!ObEVm33\;_@HSqbpQ4FMV;VC_"H]B^MehmVduLsb,JpH<rlWuM$2cGuoD_i+A2bgZR6%m`su+^!K^:_sD-qpPME:4o4POkN6/^m<pnTl0baMAbUR$nu6j&<R1tUC+Kj0.W%Y6jjN'ckMo_:]"SsOo[DT@p!^kaI2YDV^!27h%RI8O9bhLm12c]%a\*0aeQ,`:CH#l1A<)Dr>jRIH_VI#41qr%&>X4]!B0i)0VFI&M&?M)^Immjp?F4+<NH2IKU[G^JhV`0+N\NYss%g:T7CV\e/Y*5u*J#EA`T@4V3A?eY7pg#"m?O\Z?$a7nb<;[;X9'^KpDDiW)%j1.0p?5epi<F^+5n9FO>Sdm0BDWU#g2t_U-(A[V$%k;';O$\_AT5@^:gc7a!=/2ZJ;[C>s-D],HbEjC!Bm=&I"\Zi]?:G(-m/uBE1J"07chV<UKR_,/@LVJjWl<0Z]g:\ZDd,hTlYH=pM%Sd@<Q)mhc]Ed?PXc[n*iHML=64%-XYqBR!X:juT]SL5K8FIc*Lb!E_oSMk(]O-\F/B;VGmi3a*X/=i!aAES-ujB8nfZrttY2?,8B%dHSZ3V:\8F`hmeoC6X&)ZruB*\':2-Qq"9.,W*(iA]Ha@[FMrgm(OA$X1/&dO7W@12nJ[V2Yq.Q]@s3+3hql4GiM2+o`!l@ifD2n%M^pGn#;M4lO2,UNd>_=2=7M8F2]f>V<'mo@J]Z[jVGT+<,]eaq\42s]7WX7`J[OUl7]AljgF2hAB6!!<UpHlL^@$@WNN0]`Hk"dl%rJM-'_>AY$\Qj]N4T*RK;WIE.l;WLYh=mE%K%(QpP61h1<HQ@;MfZk^:@A1nTDV[ms)3Z*L/V,Dr79g5U%/++qmES8pkFbld/2J\%=c4Z-4<8hql>cO/b&D$cC_B.&4)8bUpKtdpM);tMIVdOAnEY^?JBu2:"'cTJ51_Z?@In[F$CP"M$oY5ieI0MQU)C#KaZjCR1g0V;%iu_HX`aMu)--FqS]2508J/JD%%G(&:d=YVBmFL&n#cQ*ulg0FTrE,`djaA9mW?*]*NDfT:_t##ML%N<.%?D0[fdd\`mld6*o[ep\%-]dKK]"Yd(qZhNelll8V]WB3eN#Fp%rVXifgA!8fGB*l<6TQG!77+8/.gsJ;atS9tPAp`7:><Yu/"RWecGRlO,:&-4*^qXIfBf-Q%ABp?c76*B"ZT<DRAp-6<jceq(p"2l^Cs$g.h=dT,NoQ9pXH;_X>&8so:]4Mj9l3/f*idO$L)>mlFhRdf[jA%.UC"H<qiNmMO]#?^%G1_kpLEZf2I1^p6X$P><g=9U9]c3&*<H1N$ja:mrbaFaP]aS2i'geH!FR@h<`3)s(Imb036UY]IDpDGnG0h5N?Hmtq]o$FqX2VQ@%R>C3+/on<#*NGA+HnN>k^unneW:Vh.X"2(U>P[u*I)>ebT)0F=V2<MOfLFTZ@R=YVdWKA;YuM*g*0Rp<UD&s*k4Du75"A59lLP[:%RLN+BAh4baMti3i's9D&ZGiq+/Vc-tA"`pW?VCjU+Edm+1oL*@=PbGjG)E=7V-G0og%(aPb`"d+k#_S(F=.k`k9@RC@ZY&m+aNe<%6:4)r53jQL\.mJg=KsG#9I%P27Ji#u]Qh1+e>e6YHQ@9WT=t!#hNRF]!rc,K=LV5N`.IuRP>QqZJ+fdMOcoLX\o[t;*^@Ttapff-%l,I3`jO+Js(,t]gM*?Ds"OgVem,Q^B8RjW,AOHNeor+m2L#FOTRs,9A-+%5OAO2n0O()gPh%5hT2=6bF$Ym&B.E3Q9N7!U/bH%Jt%`-!"eV4Q4!QG.@A0S""i/Oa_/%W/Qe4D]e-+[V5]#<UX@fFH6Ga,nH!D<(Njk3`coAR*J#*6J2++]fMM3Z4fC\Q%j1*PH%o,K04c%XTs;qN*=:d9S69V&0eY9W2+-Y<(%pXbE6HN/,!FW6?C%KF$A#?D-l($_p&U08Q5DMDh7j^bB/U=7,:Zr=6gCK5VT.1pb4c``SDG!%IDcBsR>-DI]K5)rJ<Yr>&.1\YFYbFd^NV$"!'nHGeN]']FJXKQbK'KWr?M<oO@6;Fdl`<qcOs#;2n5aq\Ft:<;4g\bf!_a<\8Rce%eepCos1P3+d\j9XR3>WKMHItE*^qV`95sQ`&^)5J=?uspm8F#rfZJ@8o6Z3pGC"AqF%F)V,:#jc"QCfT,\%MYho-YU5t3YCQ6B(d%2CZo_P5Pe'$[V:eF_rbACUjiSNm@f>H._TjQ2T=\>-%CF0kQ2)^W4@XEiR,PN;JturZ<Wm#=ahEYqJA0S*hsbOLTNEThR4I'?A4P%.L8E\K!$qH;V$H&oPW<H((l]dB6mqoQB+6=76AJ@4]Ls.?^$B@KO\]i[S+jfg<-5LB"B?`\i'S7faZ]OU%oZV[X:1P1k1pgd0cML%T,#T&%cn&>S0$UZX8!NYZ3$+Mp9kpKG9\L96C+QX+l,-uBBirR=eLd:PT>@D3;7"i:#5_P0t;^co]l!(9(%k=/hX.hPjjLp'2#H3%c'tQVWb@j7Mm[_)=ZMtaUrQ]512VE0>U:*?GTS^W:If9;j@-6AV:QBN8>]i0[3eZ7)-I"C[BR3;nAe##-^3A=SLQ(SO&d$$+WSX\%>)ObZh6sQ3)kKq/D!Vl@TjaV"^q=GnF$jpV0)B*]j,55FQ]._NZ&=gmr&d<@/OX9ZZ`G&sQb#P:aMujNNDPSDPppGr]12*L7kXYb%W:c6&85P^/^8FpV;hWWaEFo/DC:(6Vs"(3?j#iW(chJFGCbfe0'UtTEV6^WhZ2RmoERA0)CN.'i[+H8'>WN;h-u/+#)*!An/=?LA%/VH$)-#\/JC<tGlGrS\[_NI#!:8qdO<fXnU$^IP=fj%!(HhE\IpHt16iNiK!G2u5)@+8r1C`4Y.Su(DN$.qjVce)GEBJ#)K:0Mp=%XX@Fq67t:Ej,4X>;V@./^Be$l,/$5((F-$?`UNkTgc@4<A)mI\A;1i6CEZarc5MkgihqjB[P0`H$^FFOI%&NdRIRE37FmQ$MA<`?%hS5,OKoZ0-f'jm:(+O[idd'K/L<6lC:r>,fpPn.6@B;&6/`DVt,=8Yi"++C0fT$[4rM?lT>k[29:W[GjYtBi1ocnW@MPSH*$=liK%![\:(*bDEh&&e:;Z:k=f_:']1fkF<;6sUb-=M'YWP.?N[<>`nQEZVc;.VF,fh5&D?_KNL-PZ/f+ig*`c.q4ZBMD.\)+g[CVSfBg`%]Bpo3V81Ba/G&h@n6YsbKhIF!(n6l<a`F5Y]5=7A5;Vii1=YRu<7XiRili!tX%`'E\<VUf-f=X]p=kOk`OHc8;E8L`X_:/bM/k.F%$;(V5i;qoSE='[9UfbE>\1'P74Z-G]mUX<PLU-8@/U9uJ14q2\QqRuqEX&)U(`G2c/iePZ=aM/>LT[#35prrAa3:4jNCIO,adp?0%jj5;dd)g+?nT*i&)l4EoZ.X^rk0PDed&G]Mj5eQ5B@)?QGXp&Q9?s3*<bqgtFN)0,3nh^ZEp+]HP`e=&GGu%<6PnO>*1mK.(7L(M%:O?*V/j9AQ,C/_qU6H_`4o3f*gUOqC4.#<(dp3+.[Bt?7=[PkQ+!Yu_NY:S&F?1=P07!I6hpH9<?Lk1>_S!1*/=XJHAd]K>_'#%H%9L^I?NA%!2`=_t`ar*dsSBKd(;OY7/-@.(m-Out(R?&e*YQU3#Y2Oj#cq/<3Fj8HG2mdXNPQ[up>=#2&bHMlF7t$o8\_rM9X/5(N%],'A:8*mfY9m.J)/',MRJ&I05^fUaA<UmDke7?$3[XuG391##!Fkrag+f$U)A(`WEU+6Uh_'3sOX^]Y2B[Abb@ch/iS^j7E9]"du%6-0m9T(Y'/8Z(aqch"D&\_0MK@2pV5erX\#OceKcQm="t((;/u#K%h]>;B--CWk+HCZ6$)eZ?,oH!o8&A9VLM4MKmO$Sq1W]AEs@%?;Yuqq]-Q]MGHrNl`Yeu6#"-":>Q(KOG_ot08;*-r%O1M-I([bcJr\1mLWH?hQqs5[aK5+_H#"Z95J/gV]]NiMlp3Y,fpJDal)a1%QkW38Ql1onnOk#M:b;GsKT)0""2A_t@&"C[I[\1XiaFo/FXa3qHYaF2Bo?[?.+-GP._b-A.n)PofAgF(YR`X?Z8W?K9pk:dS.T1G%?;5nh^5;n#2l3n7WuU@@R]Q21''3Rl8:%KNgYnE[ph<iXY$JX*Vir?SM(tD8,&3[;,o8=TELt?sPa$stNdf(77iL93\##`>\J(GI%.rq^XIUjEGJ+'e#$!XX5dU7687"S[<eqq_/$L])UfcMFeAP$U\AWliWrOK#h)S$B8o,'c.Fu".HYMoNi"Qu&<=Wf:P/qd,=4u/q?%%2G!s5fk"kMBuid,t2A>R9eL-8kFnu7;;8XNck;A0,0O'BDf6'3F-Yn7dueZ4*K99F)466d4cH9%BlCZO3#8`pIWtKa7#IQa@,F`%aI\-P2'S6'Se@im%C\V_HE7<+;FcPa5R(D,6me7S0PNW9;j29i%g1=$L.`1SfHmfm*cdQLN`FeNROlbTg[6>-'%bJ%j?\`s)hdrj%m>_k0$$Au1S;l:PS#'o$o3(lFf"SfaB%jhXRQa3M/u3+fVWH?>ffGBkc`8"3n+mu64sks=12RS"P3_*oTKu>u[T/Bqr*_LjN_3]#%nN4%pcE7S6&#8=*"\rtI)0(kcLE#^[Z)mb?.6KM^HoN%V(bZ1X6U"c;*NEW2_b!'qc%m=F<s/8;.49^B-m('j2q0,EiKTgj,*UY+%P7L0/C`js?deRjEj"g.P\AYp[bd%^H;MJDKMp3&R,Vr9Z4d#Ami@M]SQ9C?4]-Kk0rNgLllfCm_o?R.!"P,?<1O/*u?Do5.GtuC,%ifl6&caZ"/=:5p3RK'!4dL<PDq(+8e*SLUfBub;5;BDX<,q%\[7VW,^,Qfc%7MNioX-5UN(ofV-92;K.M\X/+\#[a;Up8c9U%c'p%>YlA'Ojehp4fN);Us<:\4[Y-9PSJgs`YV"@-,p_?Su*77bo/&>*XS?[)VXbSK[Uj5J&P4m$Xfs:o\bB`1*cI$&fI\+r_,!jPuKZP%N7;cq-BaLk:YXpLO(a!n@T4qsAu(T97aRWeq-kf;r#)ceZH^?dlcF/UFDtSoD#P1^OG#u"ZY_HqGMRe$=<%mijggV,aL^,,9njU2%7o*YFS79ICm-"b!134pMg0)dd8VIgUack[QMd*'S_MpU[*%hsYp'd[PVS]1"hCtX&3'=At`APm#(fj:$\^^^lOFAB9jOFDl87X^m%52IBnRb31+P[]g`+@Gj+bV=jiq_5Lmi$$!@()Pu9dAs*aVBqacXUC6Pa's/<H*8*KRmSSMF+i0LS\0/s7=^Egf!n7o%U:=Jrjr*j%f"O&f:H-Gpc+RAUhYj^*ZhgNlXB.@(T.aq$>+\T+lc%=+X.>kOL]"Q&6qYa*)jfG#pVuRRF:F3A%JM@BjR^1j0^iD?T6%tJ#q!94%357LP_cMC'YdNTXoi58&gLW^+*Seo;X8NPT]4hZM0o\49i)8t2ES&1+AD"S`nVtDng9HXSV:lHR>V+u#^A3Fm[j0X()@bi"dAs-5%UZ(Oui-NV6\-tH74s@g]]$W(J2QAWX595Fr<U\ru=9l7+EQN)W8]bj+:4/g@`ui#BgrEJUI+iMY20tENhLjYU:nqc[SQ;qd21hSa%6Ot^ZJ$D\[pP%.<VK-9K$gd,;/#iJP=KZ25Z+/TRf;7^WID3"_,:[jKn0OS1K3D"'F.^&*2XJ6mZJ+od254:.Z2`MD23n-jaK9%D%;3Ud%XC@2&O5"^jTA!4<fhWNop_=D,)tPDe!(uT!\\WV]LQ*p?Dj$"s\kGu2JO@b<c%ZpphP6,P/`duBi4cpYX3:c+:T$\@L:K])%[XY:N^85*nP,Wq6mMa08K%e=ccU_*2VeqjI/2*R$oCAZb]-^fKa(B]4bbc=D%[/3./nuF='nmS[RkE&FQ:mQf50WNLFAXbYG/mE!%Pt/om$Yq-2V41$<A*PgmDW9>kEDc&DB%'1c,T5TpOGqk7M=\lHA^a)MdmU@PNg3<TPtMq*1,<l.>u[=?GeW8bZKYh>7OFQuQg($@%Z*W[_@3q6mC/oAgCq;$)PUfEgRk>$o\QV.qCq?QM\q(fA`m1H>)F#Q%'?m>3WX;gP-^d[FjUMd]N/X<%2^64qbbe%1fVGh;11f-t%SP>G6a(h,\\gYl\PZp;%Cq;$K'>-84'%qA(X!PPkPKft'/)[s[n[$hEZg"4(3GrD=oP?QK6?6cdhS+r;9c$6WR+npdaJOm<V2NUZ%)EF9>W^G2RO)mnoWGs;9FCh9!%:?dF^%[WJ@O*=WM=e$Ocn&nl`2=$t6M2rXF'i4YG;6)olCr0sMsr@)d4+a#>Eqco6o"CA\2;5M%)[k0lcq;GTZiS9?]W*S"V5TsY#tSX95!bFM]/t0kGQ:lDOu(<u)CC#1XXqm^ONA6-&Oica^O?Z]KS\GS"$s04H"HcF]9.-be8+KH%pVUNaag5;pQcfppr]Km3GBd%mb/IZ>''U#e87^PK4Phr>15dsIU:[\6\Jm/q39iAF;%^cuMsc>C<N6O8Eu."H4S#5Yi>7R!os:B5%(]0$O>eTN"/C.dRq)D=DCO0SiY!>%W4?%H?=n5mX>UBqd5:aZjWQDg)H?U"BnAFp@0meD&4&s]b%-'9dABd^K_Mj]V)GDnc*U%`C%Nk]!q>lZ$/E\O,A^k.:nm;/`2oc?Y*.qKdDpt\cEPM6Oh3m$2SV\s\GV/0s3HHif/.R!BCIdEmB>"e'=n;,K<=O/ZJ04ni5X_0Hs%%+V(_fSu?CY#H0d[U=h/fY`QR&I0!`fP7^Wc@.5c<)u^g?A[PO0X.=A<+][p)6VVp=Ao-9/Po=TFl-td'*6tDI!>lRJJHYb/$js/%+T!V<FjH/;Eo%\VPDJcSeD.Nih-bKa#ph?c-MtL>9G\/7B0NILN&qQKb#=2<>-4[pABF".bMWjN;*6$\1j6,:9WT*%,+amH6mXUI%]YY&jf>9cs_sF#Fb`n&q35Q,K;>HJY8PA+hh/G<0H`PV6\BErmO+"p:b^>A`j)-jHM*%ncKU_NZP*Zlqj)0f^L%CI^]9[>f)t%_a%&'5^VL:aObR_pJ;nHhbTi#ZII7O/#(dl3E"YfbXOfb8.je$gERRY8[k5#*6*p=g[Wh*1Zq='/8,BNF,a/#[+9`*-=PS96W:@P(t$%IkKO8Z/R-D87T6POP_+E`2*/^+Yd5Z&Au['j'%T>^;V0F1Md]Q9pa/5iiH6U)H.V)09`=$G[=b.M>QCje+Q>3]Z_(ecB?+fe"q-[%8^&\.d5-%L+.QEPV(p5tT#WAD%$"a=WW5S$9Pho7(fj:&e1hB?;D"a%q45V^]F$ZRTptV-c#MRPI#L5K6r=-(F5R]e_G[7"aX]8X%MIfBqcYt]UWQGPC0Vdg@L<i2H#u5*F>B'6#*lU<FH:cthEa5fB10ikFSs+OY.D8oqEO-A0*`"S-<P.(0S]EuAl$Z]YYA.D`='o]L%leRQC[e&U%FgH0kX_sGK@2nCo)`Km5QQX7LF=D;BgY(?)[@/Ha]I<,-rpi#:GkjmAV*I4LETQUB/d]jQbS:m#T;FYhBm>cNIloUU%^)Yn+f(cOr*14KomU9&#`57N59Y0A(a]BAiVP`G^h;31W-^kLBVHK7HHRgiFYYEH_VP\LnJ*KW=*kNps+n2Cpf9;RkSIb@9]srI"%le"[J"[_/!pk2#:dJ<>Z[aC._XiL=K7U*/q[$AHa]]7317dC<2>I!5u>[F?e9#cQAHTX!^6o8'<oIn5Ib8JL*KZZ$o5>]f)[[3s_%C]4U_0f-B'6o^_B,$V;ArXt6k,fPU!U9%Ye[RhCH/.S7)GP&/(FoPR,D8*0,cg"3]1)-@DoHtNQ>]uotg'SKukYa6eD="B)&uEsp%Wjim^L.Kb?lr;Q0_f:O2dnj8LP-`Skg00c'Pnpu!1O-KF-@Y4g[nA5pDbk5;/XpH&L#uiSUcPC?d_`<r18P&l+*]T;]Hljmg-BHY%k;gAXFf@0iXQ[o9PF+u?W$a6*Ar=EbI;59=Z22DiXaehJYf]>Ep20a&fT5k3c>=h:/u<dQF014T/44M94pu>r6YIVJ0PeC)lDt.=%Mr1@r,sE*u1idAR_Db:LVtZAOS5mJ^)XilY,KGOkLCOMI65h\nlXmZEY2Bkspqs7FJ;.^hV+4PTA;J#*K!"ZD(XO7$B&`@6D$e3:%>9]J;8UU7.P<%f6i;BkMEid]Z2^KB#-W%c*eVZNQ+G2To]O*4cmtXXAPiES0pQ>:KR8X,bmrB9c^R360g"#\jM(unn.K,R#m$5Pn%XQKpX=-e1.mk>GK^#(2!?H+6>AknLu<bu=Ll,(7OhGLTZZ[.Dl?"q2h!G9RW*'@4GY)74:e-gSN_e&p]blL5W5ACsAqA_!IIcR3.%!2EQM?k-Sm51m@W)ZE4>n6Uh-Z2h5n!%-c/`KFa+)tbE<aI0@7ZfV8-c&il-"2,%e:DkhI)t?D++YVr8].Ig(QguFm'de&P?S8t=%(unN.J5lO&0'/kUd8=htbBt`\N_@e0Ga#Y%O8/Wl/`26F'Y!mIq"lR3\We`sWW5TW=l84dkHc^P6NqE$PIHp=GH[X[hM]%sDs0lt%M4G)5b.W7D?(2ja\*`?MS..@"]mbf@G@<^]`,rp(S.1bJ?G?pEPnU[Z:J`DoZ"\`P8%dG,q,Y78+bRt`WKV;)hb]_G,N%f'jG<<-%I\E;^,N%gRgpNsT.u1[e0,B[Ag]/Pdoh4^L/jh\Z=<!pt0Vt:S5"%G@dR@9K6KUFDM>-im9/#nVa1g.Yg!Bn88Yb2/Vi4WoXaVLe%5S^l^0:jcBK2(#]Q181qZsD%B\^taT3U^\VqBa`+\rUdjHi4#R,ji,\lX%?Ym::;J,V^NdLjT)`(KC0(Glr?%6f.-qPb)pL#+pB3%=^h]HqM"KH8&!S.H(B\%%8>\d^P&$(e^@]-7d@5PqF,!4Lg0h2[N$O\5of]ji`hFmY?tnp+7!5tR>r,l3]ti=HpaOc&U,>Spj!D8%Xa];@F/\j07Efe;-/pJfD6r$`Qb9R\(kWk-?GGRm4N+oqA)?Ol;m)khB.+WbA)6I;WlHH,Y@$(PiiRYC\W8CdP=E"Xpr59e8+,T4%^qG39`*<1p3k\tk?GH-5pgQ,)./3Qa,[9K]7@7.Oia0A*p/5f$)_W]nX.(?o0]V!TQgEkUbkgktob5i89[jp<5/,,)l!a0i8%[A+%U6^a^UCVFL?ZIagH`eR\oc#n/*cht7^Xk.7<^18/')27)-/RoWp"0E8oh40*"J\2<Hi9,*m7=MPn+@?=AWt7Kn+@WB?9-fSIPEmF%h<Hqeh1HE<KNnD,Vp19OY@"SFQn(km?GGQSfI2Y?b.W7DUr6L9')f'Yme'60%kJo^A)?N1]FQg@]marGM7<=mbcX[Rf.Y$jb6cti%QY[X0"C@OP4f^EtU[;1j.&1&bh!lNi]BI/VRPXqa3>C1A>f07gGTTU`%-]K^nK\shqA9e@\Q<na0icHW64fS4^f-mg2:rr+5m/'6%;fgR^mo)m@g&7)EkKiYWHbF=KkZ+Jq*kKDRV8Ddno4$U[fM8^G\5Vh.2eTU(T"hLY4nEfBC8X9\<G@tfVltP/b;6%4*sdoBT%g/i%Z`V9W-0KC=c].gL^\=u&r:Aid[rq!5#N)uiS=f(b]>%)_O.Tb([`\L9k;QW:F#Q&.ir&6qqtK(8;/t^L>Oh#K^KW[gS*bCDRAoFG%X&CWa1QO'X?ha!6$,ui%rnQ5"RFaUh^<j$*]BdX1;[_Klp8<ko_jBB*S[G.K[.Q;Yn`?L=D11UfBNp5sO596QqGR(dEG`-C]6J9&%*M6f/Q>;!8`DuBb)MVd[-G:"Ke^*'@DXZQU#H`C+MH!,_>\JTN>-D<1g8O?q<\(4pnd7q#7rWYCcUippPZ531D!OO!:*7eorcC*Q%cGA#L_/<-D2;H[TT;@s0O+kcP)/nVJZZ(#tom-8ol-?<jJ)#7*+utkre$o1:]D(hS@>eTIjs9@G9m*)BQQ^qOKUA(CDU@(:WoEWV%n=hZVFXL;(F]3HX=s%2I1"4^E?2iJ2XSTouTC\%_J"]p8XkWDYh:UR,Yl2le^WsP5<48?i#=[NV?#TKo-hl0[T0I/@Sf4)"`B&l6%>ub%^\sS,bk)-Rc_L&H4R+pKNdHa#_5?4>EAK:uQ?,(acj(mc"k9]/#qgMBm2ubF[NLtbB&PMUO0po#4B64#f\jWU\Rf1,TSI0(B%gR>$I$,ne`+><G/OTL=uTDTj>2jWt!pKhWtrajB&qXh+61Om*=rVEehYd(JmeKoJ/,,0nUU=T;m*\=6#WeK245s/=M+._Zji^$.a%n?Da^4OB;t9/AYjr5$33mA[h-2r18`C+BgP9(B#*V)qP%8U^*:X9#EH9S.\c6,M'N^?t8)nC>=cDgrIi]Ro/f/WqXJ[r4<tdrE#G%Pg9bHQ8uGsk.$*;gc8B5k?+L7`p7j'L\**tp?q7S:8]OEq5R:Cn"2e5jQW""qUCmVQL?-=^6Gi:D19LRN0i![IF4\eZ*C$oc`!Qe%Otl201GjFfbrSFmAZdU4>HOd\Wg>sB4r)CEaLF3FB@]AfrI-tdOu<:4FGb)/e[88"mHjKq],)8J-)2@Ln+Y.u";_Eo(q&a2n-Lb0%c]-Z1*M!O&Y$fcI%W)o7g<5o#rd)?Y6,h]ZcSodp?cI^-<S1Emc.<E'nS<tnWu*cKA.h\q]m2iY\rE?RQ]I<M^)@>B5?I9&F%!cH%`VTDl2Y?*3o]<,gF2="hl1M)q"\%AUI/n>nJBCG[34AL:r:T=G7_/9%::3ja]m4]:WGmI`ono<X7%<0]L)>Vig0p^75>s.2j@.Ao%&G<;1Jh`lB?bc9lBj#QP)r!YqlZ;]%:O<$fq<BTn;#-1k:G#a/bbtHEd3lM[VKRS&o9FP5k?Sd[erfh9Q1_>ejm0uq%+.K#(g#^'%"jW*-I<"tc%%:[4<@NA=@a)GQJb"#:dLO*5X\/9B*,P"ihL(`/2tY'2DG/AAC[V"Ap#gDX*mRPFJ(nN!G\_RG#%sQ7[S3X[+g^B:%B6,+3hhOQq,`>>f4]oL0#:2:j8K<jkGf#tR?BoT,c%1ZS&,9k4@mR*[1K4<^'Bq[EK<Gs4DVsbGcF_J.,#I_KMgrD2Fqnd`@8m-8%SuCWs<!De6(:HidG3,""-``dAeVte9$a"e[_R1D1j0UQ(?^]?ITSEPA'fK]>]Sa=^TdmY0c*C5uhRM@h-%SV-9<[u:j=B03rHA!N%m0ofSW)J.K>[Aqt.2NtIreJCo]&fj-G#9_/19_"qdOS^R[cY=rmtpNN*2LAU-[P0es+*1204tNi-UEsbd?.QhUqa4>EO!ldXpUcR%!,0L_R+6=6]H!8uJa"4>ZQfI/G9%TmQKMk1="k*9>QrFbR$SN!SEc@)GYgePoBMcB.9E1ecJ?d9Hm<Z>D2$8s+@OT6";-)20'"D?%iE23"X%Iuj.3?gl)oRr&#TKX-KYjXdT:?0f=V:b>GujWBDdHa%V3#)5q7-s0O$m(u"Gs?.Lqjp?Ve+3ufl*dO@("=+s*Z@uO@5JA%HIj7Fn,`(2qi%d=kB@(9[_J0+J"L]nPa3R$EWsPk.+kZabq,dPZ6$nUC)$gcr,0c5.U]$D]aB'^m]\[LpK4[f5"CbA\NUUZ6`uN]%)]2d"M3L[`fo]7oFG!?H@rNR)AX75(/XM6%W_`j1*W<7:NDg"JfXYPG-CR.r\m`T45E:$iPJ/`BL4RH<0sZBR8'oYEUVpJY0sq?'%LOffXFCZi)Q*I+3r,a'^0X"i*:T`W3)p_KWiFK5YJAoE@GoS]:0>:FD8V^PZGhIW#SPH6L9lFle(<']J$eJ\UO&Bk2o?TOo(n'jm%en)sTF\qt7QJ@s987dmY?4gPI.!]VS_N7?&1kPq!<9:A=RhG10Be46MoA(&BYn=UQ4gS#2.VjocTlspmWA1!q+gZ5QL<$Slr:]uD%Ob,rEXfREf[YYabQd.cD<S[R%Ubc!`%^utf@L*47=?I?$35"KYQn!cAC6A2$)0]dG`kGY\/ObdW=3.JQm[WR@>)3!sGO%?VC5pu'%)sZ&8ZO2UKPGp"!@I$"^Q%5c^3i<dd>rW2Xl3EsTmC-e3,$0;oif0<^r[b2m^!ORK,+EtCW<<Ujo]JKKh=TB*g+LY@^[sNI59oTo%gSU0D4sbsZVnK[_k/bL"]nSOh[DZEgPT+aTh]pZhX'm\kI;d(%1c3AjnZ#kP&k8tPSJ$WT@psr1DHVDW<gBpR?&bFmrdepM#ATWe%.*>a?$E&XSM"VHi5*u>6\IiKg%'kC]!<,..EM?.f'>>NgFVB$$ar[n"1h#0NEQZto52DC,$/>dpFBiDY\FgjbgG,apn,]X,NeI<%%JOVQU5emGUGNP5Ci3=pB=cE1LN>68@"`BejfmG53/6%YtIdP[/GG\-#WAi]I?]E]K[;!j'2a/P>_L9UlHB.`#76R,`s(J:;p&1rc%:cWrrH)cA-5D"FJ(L;']nbrF,"q+F9r?0gWZdKX_%B$>?,"-a^`+!K%<R;^%A^99OV!d"+0VuG/GsLSFXoW\'02qd[6!p:BqT:=A%l+aMBDslg3IhhM)YF>5Z=+b5,O!bN51Xu`<k8>$kHN%dQ^@9)fRg2_M&-s_7`$dZ^@)'s^l*.RG_`bVX]"g_$n03j^_fT*mOn4KW%PD03J[CUVcS@:XOR0r(BE)-9'!]C4[RN&Z2lQR'Q+fS,!/#aN+!rAaL;XmCtLffH+_MMi*HUi]7eml-#MXQ;Jb%oQJb_M%lSXWhq%UUmm-].p58J)"C0PX3T]:r"O7K3).Or2HI-*-nY`&u!nFYhJi'dB6;B*@B)\;T*o3Z2STW'P4A(XrJ!TK*KW`l+-mJZ?6*7>0ce'%]4C(fgN1J,q;hLNeNN7_4Zp.DMn,*X\[&!rBC5RkUYBO3C&P)>leK1g[bC]XEkYd=XmYP#G-,o=\SpTo.]`Ns(%_5F)f`='B8.3%%_ul6dg+RsAH2GM$C:!V,]35Rq%*lS8q(oGRpm]p:WT%3_0XZ.HIm(2Q1est2[X3r%oa7Vp_2qqFo(J9+\?k[uf'7.ef8KNQ(Eqm*%%ANmobLUF2:qtY!SSXO;&"h#!Q*7g-YDr/&NH/Cl:l@`u3N=Q%W53<]\<3#ZHMVV%LV9XnEspkEn'JVgWQ"HNor5q/Mp&*1V<0W!%bk#KB[5,-h0or2tarc+,bs/nC9eEc6^B#@&kd/LURAG^QXo=&Fd8[4,%n/oGB3r>]i-okBM?Vrt05p(Nd1TM*4D;qAF*gsc22;c"%,$t^U^2S92't?[ZE7GR9a-([EM*S,8=X#G\eO(N*+4.F'>_,,n=Hnl*g%E$9r]l_f<NE:iBo5.Z,K!J9ABQ*F7#","+6pEY&L@1&%&FbW<!F'n^VREoC2:,)e,-e>"o(C4W\r#K,q`_'20Fee"UjId2`AlRSiW7R'"XZ&rHR2jO1iV+m?V`M7GjFGB4aar]C5M#Y9?\m2%PihckeIETkdRmMH&JVi</C@MB:!`H4>!M/!<?IdOiT?'m_,I.(S4&7"L%eoq>ln(TAQ`BC0Sp^o1g-Sp[^o_GS:+Z<=abC9h^Vt_%m0i1kn+jucoth6Jn8rk'9[FSSRT"?VDtbNX1hd)]^eW6.KVRMgnZV*I3Rs45:Hc0I`o^?D)oDSUKU"agd(e5[hEKRk?C5*rHr_Fk%D!>K[4IUN(7-^r!iEsitl70^6\S3HiGtT&8>N_%g/8gcfg8lrog4so16^83a1WrX1L3m73C1dJ'lPs`N+DU%eq$;)ep=/+"qNhIF%1S\ddTP=ZkIe@FcF&6I:LDRJ=T>%Qsbs+kVq6oF]o.@'5/0+KU#GRipm^#';(AueN+8V9#]'>Nih`\S+opr4'=%eJDKJY_Ljep:N%$,*UA`T8:LX>+?glCXh0&CM9r^3mnK_1OPt$7q4>\at^L5tP?d/TR)"R=Dhn7Y;u)(DdHTlBi3dUY3,glQNI%a?K.;*O5+@5^Q&P%&8CE6Kh93`FV/%Aq:OCMV&18-,B-.N`-1b1D!E:Ua_!nG@^8(Tn.O2l[5'>"R*KCG?Y5"$(%Z/TMbj"B'ufI^3c51]=^n\GVl/.t%[mI,p+tN;_<UEL>)?j8tesa%jTdhZJO"-l]V`A=L'4kHk3FVjNhc?&eO"8gCTlCN`1.6ZV?7?4-G4E4uYj]7EPM/IN!]U&XjiMm8%=`\#,5_"hu!MUrDLY%&gMfSWG:8fD'5@?hV4_FMBY5P]g&*aI@miq)ga4f'QHh`+e+A+p6@$)%peiOU7pne\_rVB>AK8%U'0.J6W%m[CVT"Nu+oTFdgnp&51D6>:0'>VMEKK-XQd;+RotrR2)6CVg:;ET/OZ0/%;_N3nbT(0E19Xp([TK?_^W0lLRoQ*gA_@`G6(R]dT3%`Br-*i[RclJZft$.1tp8XK4D.BPY,8E>KqSQKZ,adBMFT&!'(;@o"&1WV!+rkSd"C.Mh2WV)qhgL$&EG\1hA,U4Vnmbi3)*'q%%5%H5DK4)6*u#&11s;GrV5YRiBChF0(8]qI-Uc&XY%MJX.gF>D8Z"%_0M"-Q@sJYJU)XF[U.oCUY31='h!Mi*qNfId%-M'1;=m3M&[F%or9"8F]9DTX<NZj1@[BdZ#U20UuRQR+;smKPdN6b[B(l@2I\V($oee>9>\P>a'm_+h'^Zt>![AW2?O[2`ILAuKbDC7<ZJV<*lMM=%VLf-h;hk&E$n_!=(?\/e/[3<)`FW`)I$p"I*rKc+Co(R_]me]6a,M-p=6Ze[DVbb=s3@kE4'*8Gqfde>hmpVVgV5O\r[&<uGPcS=%IIfDT;a8:qmgP]#M7eeZrB%pZn)4/L5NcA5pM!.ar(c)Bc0F?dC6NCkh"3bZQ>\N2UM]iKC<JQ4fI36'Mo0B,`kHhs$RN(:Xg*L_%d$N8Of%@g@>aFm1fYO[p+[^KibhuOjs/tHaEWoQl\uE1-eTIcpTg0`uXoA2:'X2L6>7XNs^#hP]DGJO<IuXA]hl`U'%52YP2Ygea%FRM+H8'C&fq>;<(@;a5QDSPmef73(mS)&Sbb5f-/h`KSljd5R@p4ef;aj1Q8Zl;o34IV&EXrDuO9hrl5aNru*\bFmr48J1rVj.ZH%YEa2GI_fBWSq#%"$nkNP+7eMLq;XC7rLLFgqt]RH>5fSC3QYEY<jI.*[H"bChm0rnCX1B,P-:@dK^C3Bf.)%MBbFf[aYumH#kL]X%CDd7eQRkqA!%-EUK(1a*EkcW&B=Y>g7J]42jQG[sQPX?V[1'\.\.f7OUj878*=so[@&)J&*[%=odFLi+QN4+Mk)e!mE^sFl8tKtU%C+5ogCR.a=*ai]^&4-rOo%89p,:L(5A^OD95q6pJP3\Sq!LP1V[Xifq8_6\#2ePL!"D0Y@Hd/sk0.*A:ThYSSaNDn@0WX8ZL/)O9%2-Q2LZ9@$@h:&V;KA9>((n.;%V$NUl)-W6-q^R9+k8X=^!Rj/p(*`PMLq%@AZoQI*UTS^"[,RI3#c>]nk<n@YreAJ]N\H$UYN;ED%hl!uI_6tr<Q7C*9.@Ec6^4f:+RYeq^CFTGu0h[76)epfg0@+ZP9oa.[6&=Z-r&o^qTsf=fl"p-R*A#N+$oH:rJ3-.t,BX1t+l]:A%gU)t<@/$>S'Pa'H-+)\O54:>FXHGmK@Afe8!$QL[fP/6d!6!^a/5%R*Q;!cGL/d6]M?JTk[:etm$^b?ApmqYZ:C#W0YrdW\D$e$R%'>_,0V*ns<fC8Bah7H;qq-'NFqh,2j$b8nhO]DMf02VrDM1c!Xg+-m'is4]&.9T'oe5?c"K,^a\5ZiC.*eTS-qQu0n-7NE:4]N%R%<jIt*>gsJUT+haD7##%Zp0>Bi*'XdM!@#'NoN^?TWZN7h'S4oFX4AO=9$[Z7-n8PeA2qtXKe5;cZBW.0e.h?.3,E%*4*jB3]U>R%%a)_=E9u%HAAeHsg[!*?VL;saj1=8Q*Cg?RD&misB-eJH\(_/.I!O$%GROOL:^mpSVOpXQ1=#5H:h6]hh*JV*N651g".5IX3(:<*(%pq:W1-)E1`6`Wb#nggim8!lRV+L)p=P3;,O!O`3F%hMZ00$t):KE+?k#*kNl''47+hfDNJOt`u\EPcW,J/PHE2K_sXJ9>S?mR^[X%,4JAG_F-SpZk1nt.87&W2aDNe,:"T;@PJ_6)[.1I^FWiu%>/@)(Iq&N)$[?rHO>`$'(KstS.^XOlV*q\7.^N>)k$gOPdQ>Cn9%)M%70^WZO])^U=OR8'-q9cA8$%rO)%sB50N1>SlYGF<OZ.\e6P=\TBPtTd=AqJX0"p>5\u1kBM*&_'@l^nT*('L<q3JqT@kdJ/:?Y,^%Z45kAh):?%T!(3gK"*Ts&Z*;*Jom0ECsPu[_uoN\d:Ef_6a7F^4@6\Of,[6!-b_nENE:cVZg1!u>>uku\;1Q-=u00!'*5<hn4mOB%)!$^cCnSiuV0#=!;Np@5SdJmc<$UlN95GS'E_H[SLN+](HV,VbCl&!MRN7&A9[848^hZ<)KcE]I1"QJ%+?!J[DA!6-A,mI,k,PR%%Kc)?KX3s/e$,!3^3qMn^b1F)O^XN@>Wk`i0r?.sQd:@tHKTUJ$7Rl*Q/4Uu%OgYnGZ,$jaHn'2JTW#oMd,h?;qfM<qVf^q`;8s^i%+.FNn2=%bdl4TnU:jpUJc&mha<m?AY+Q/oJ.#(8]PRjSt$P3'3Ra!2WkA"m"jV!qpkX"'f0X##=pW$Y[eJJ<(;NS\mo4(p6jEYT9%YP;A+.,)]\corMeR#X,)h$?8jVsunS@t"uC\;%-N'uF^smKU([0C:3S!mEOI2q/%hrXn+4%?me65mIluBql)uTPG6X^^D:;30&P'%?cPD`"`nD30a(@(Afu"q*pY8-&G;u+-DLg_^lnKBP5$_$5r/:9"FX$[#/P0p%M_<:$9I9'1Z_Q5=$V<6"?0'cO7=oDXILE\&FWHQ%`c4spU1Fe2DB7.3b,o1s4RT1.FPOs!U2Ypn--G#mbQ%n#(3)Mq9.`S;,X]K'M,(EX#SUBh%q2J[R"Uqc4W4O9KQr#5(pOCUBi</;%;j5]3!3-i1/_XoC;^a,p5c3h&VZJSXS:([1MA(9O%Jd40VK/]80+,^45I/FO9;\JaP#m<>@9);")X3Q^8o0:HL4CbY6)tnn5aC!?%GSl1=QEloN+=9R%C^$JF&d`(5Qr^"%!?FJ-V6,)15'".B&u>ln<`#"Lm\uY.P<m_E![aI?S+L%=gh<'9Ne4?00Lf*:EGRhVOW):&%L03r5buG<pALoN<&gB2n$I_]W96li'@%]ATM'#\W.W/A2Q%"Ks5q#;i<0cK9e*8t*W.LH>.OX#^YuHb0Vg-Y_=(0nW(GOhE'*o7:%maO=eFNqA^:LKckH,3CMa2pSPIhfh+Ig<?<mfcsG$<%ponsrJc\0M%YIaIZ>*jV%T/fl/eT+P#:?U,=??c'>1%lI4f9h5=BVbs?^%apUMXdK4_2d.Vi_qY_$LrI,L$rVhAQ&aW41`[Qu.pB-@1%eoi$L<+>K?dMu$oWf.Ymt\0EDQG5i\54pf^L'='h`lYC3.AUE;f`$Q%1OW_[Tp%n+kY-d]ClcGTS<"7V6c5/l_?`XQJM%05W`F8<">!@cM^K?P(ep411l#3<$<&W'1.pA0#ltC;+ltCH@hG)BW@K#>9X.'m%^*ji9G>nr=g3,;1X94.Kp^E;$/<C?I_h])UA=a-Z.4-:6J<B)kCXPOc!__[9(?dEMg17N"cSEIT-C]532D+$3":0e:<Y.OkfjV'-%%($=HMLi_el90*<6LWQkO$V\eU7dL-@j#/O+DZK_;W:sL"I&YJVpgKUKJ@ZUCTogO$CJj\Ku,Dc&BAF"VV-o!$po>%#M33+bQ>e]%Ke/c`[O;b\Ests+5SZ>R5T.Pk%_rVfcS*WG'h81ER&[&<JDg>,rpX`&L%n&1ifmT]^i-!K5L9M8UtE2hOuk(f)M.36C'5g1A]gQJ%3#0FbS:CnR#E%";=?)Cd2e:l4)QeOD"$L&q/=[(+(61#CKe+3tBt@d65c=-;#F[<-,!$`GN#^KP5emaMD">`.S:E"W:;XN'"&D<`%//mo]'s_g5'a`/;i"*a"V2^Z=C#`/0[rDMF,:!b4k([[l>pKm434d`VY]59K_Ks=!8/k',\e2/dd#]'JE=sI4g]1Yj0dd?5X76K_%-I3(Q#Q[l:AFXOOCtt,V$\>Aj?:6007W?=4^f2<+WtD#0Z1;&-=g;37`]-NSEDPbTP$9`'81@gs!G_ljY<_03Q@M!RrIKmpl(P)[%jUlPJR!@I:Gc@JFj!m(DB2^9VVdSg]00CPb6t*/5%Z=1\(dKc--5M^I7.#\Y=er5*Q80Hi/I@u[csE*p8-%^G_2H5),&eQXgHC>s%"<BN'fduF4SM1*YNXe*lT#Ka:gn>r(2sbi`Qr97sj4rF`KDIIUachO#Ing!>43'Y0&::WA+=%O#VKd!Q[Kt6I^)U\34)@cQpgM[`%&X_Mr&d/3_/e5;rMjOO$m:.8.Km=6FPSM"Jau,nN#/SnF!%LVRBt"MY*XNC;8W^a/j'IYZ3nQ=$56AuQH>p&#i#.QG$^aP.rb`Ed%>i"Id`:6k+:-d$7o-b>.7tt:P'!NW&$F+o)BbT&5*6VnI2Oc&aDh2O%&=^qf%>/CH="_9c+6&<pk;t/0O5d3S])!VPe[)([)jWnu%5f[GAL;=mYbI'^Y_\Bo\K<R$a7]!,gZ)&)PHW+A.HP8*l]b(MSZ\2]JlYKQkn_SZP9dup+`oGpF$K9j2:RhVb;daqX_rZ+1^%nm]%`e(2RQ]\l'^iI73,p;eAGprf7I7&#23'd#i"Gj[-:^s$QU/qO>2Kcu76c@[%99b#V&s)+*mj8(`G>hr*G8hA<@Gu`GI+b%eD?.#r%$5*$g!%+Roe9;S5(1*EqK_4)JNN[>Z;?Rf&Kko%ZP7Zuj%H'+(2=kZC=]>N1^_CG"LE/]iR*26mgd1Hn3Sh,#fG,VSE_7`gA3;]4%(,@_+Xh-Tt6:%%R$\+1FZ*t]C$ed4bJPW+CKfO21jd;oqBl*$Y!2dILVM8Uc;$2pb%F)WUaIkbO+\$8_K>@QIpmS#hZ[fiS#B!V,%0Ok(HmPk8&:">AWp/nOk\iUNXl0\u<3YmACYbfVNl7N5eF;K^(h<"6^%&T;+:#hO-kUp)gjU)&>`FXbhXoO.>/q@A0;!KZ`Gs:hI%WU9fnMmY7@"?8@V)e,t^HllVsWSi0`a;UqM]*(N!?4t8c(P.sb\unW:**S=%Uq$5/KlfKn7HL?GK^oJcK^oH\%d-nc10ef4b)=,A%[K=F4(PUPRe6S6gS6_C4.(Y>8BiEi#5uD'ZS>e-?m@!)T6u!.MZo+oFfM&G)_mF(f/O!lVYWW>';F@7rV]E)<g5kHl.G#qM(BJ.E%iDSYu)AQ3oK_$24A+'^@)&$20\UZa/-jPQa(XW,qG8*c8nh(?IB:0H.oTLD@W)5RZUuu8D/1nCh@I$m?/0%O/nL!JZ^d]Mun[U2$%":JHc@]!Qs"uACF6DfXm2[/?U9^%^"$$Vg09boN#,#)b8WGW-=&9M+>\<tLVo3a^dJ\V>tjg-!9R-RjV4(?#"\'an;R)lZTL-+-.%KR:.=B6[f;!+A0""_Q]TES<QOF\!n^W^%ep/6jY3M#fMC7ir5=i*_W@q,Bc!>Wnh-Bko?[;)XKB>e1>^CQ;q>$JSKedL=iu%9rIa%BUJY!%=<K)(mo9<Q$9!26p=no#iH=%;r/7;Mh3Zg7O=S-nLt'mH_;Zl'c<RK!$o'j7iVPIHk\:[hLH=h":M!K_oIW;KK"[i0piH!%EUohJa\BE*L$&S6U6P!PY@sSQGJ[g6Ep"k>[gJnR(B>$j*[\:d1qH#^M+r0DrK@rTZZ]JG$:Ju@^kf!YF2VjW>$1E%dFB3e[1pM`%e.h?.(b<n?Y4HMC@Zq1f(@YuOgZ/DI[dursL`uMLM.&3:431$^/4.ZA\L8#oa[O&\.FfS&*Sf^"@<.Qi!b88k!5YTs>E9"gD+e0,%LJE2bZH5P/!o)cKJ?Va#&uOZao1c_,0L`!QI8R6=2RsAG?m.?32?u9,*CPen-unYqLO'LmW&3Y2dWHae1%u?IQ#%ufY&@:X%#mbJ%`M<oMiU%o/.:YGTjJ:#N+_%MJ!LU])a'i,oVuA`2=UaG,(=>hVn^o`uiW8li@N%?Ei1f+G#ZW9Y!.akr`Zj9X#s-Qg+:^3^5!%'!%U%;7p"]rR&`5)rD+/HruKXKL!?Bq`1?h9J72(Uq.&GZN\)"VJD0Ogo2K0hW\]4%)KpKoGAZFJ1X?t&td5>OmUHkD.q+@*'Q&J7#/%!#)uSBpJaQfZ^;B9EKaS/@<Pt&1GV#5Zj61L#9dBM/(jUC;;S9!%);M/-B;lqf*U*PGjeo&:/u_"B(El[VSSV.B<&7%>0;+Y$d7k%!/IU@T?O`DLl%TXmrAaDPQUGm!5]N7=S<7^kP@e3clL(*>8(Qjb>cNkF;O5)&4/pK7RmM6\jpY!_@5it%DjZ,/q@&O&W(+0;64R[%:D,bLl'dd@7Hs(6/;-:.:]UR^+BB*Z(6"Q2\I12bFO::831#;?,Fm:$YaLQU]J)4ba);MEVKA<9FIQArR0$moDZDNfr^rV(8'E'N%FXfDZcsL8+IFD+f&Vt!&C(_)_Co+pLrgTu\&tHG/%L^<LQ4fRCR_o":^7.^'-T])8$Q.':UCc(:-Z\:4Sr69'gU)2lN[SIY='a<$%+A0t^OHV>5&eZ=60#^4d,teQg78;b?NT7X=*q"SY2$bIaflg2E#aii)ZV?3W1#!)R*8Lp)@F7OY/B$]SA)_/6WFD:/(:[YR#]hOe%3q%D07]-\P\,a(G!&4rVVEr2J!enZ-/e(!(6kPO'PZ!V2k1WLO_tp&.JOEXn^W0^tfG^]Zn:5C,bR<gSL0^(6/_J?VR;*mA)f2Y#%Jr$Q2JO#.PYkJunXXF7(AYcXQoeoOpZ'ZVoqgrOK.9Vno'8WZm0U[WCL!l@*DW4-o<u"2-e=`@F_lpt:*Q`6hlrFHZCj\oZ(8VG2%b\]VfZ_9]VHO`dR<1"18&nk"BV<"@K@e5h0/jY#c)^qM(L)R>5mbJ3+dqJJa$\T6s#-]8=`srcJ_\E*Z9\<t8KOK=K[6QV^"cF!"%LY+P@9j:<&f?:U1l&]KG;V7QJ,A,!%W*^n/NInEZQ*tKq<S^!6`HH7h94/s?T>L:9(c\cQ3n!$D8=1ZnXbHTiJB<!eU398cNe[(K%0RME[Jj-$t7hgpT6h%a%*OsNPBoJFpLu)`Zg0g#H,oR_'@?utP$O!CQlAL8!2TG:b+R]A+"l&&+Wku]'$%UD?F9#o]3knWG"QDHH%MsS!I!@<CY4rR^o;.-3kSq3^Xc*S42,OP;e)+Y=:GZb(A%oQ^rIK0G>8>/:BS4CAA"t)<]m897ieH"Fn#nYE_Pq\k=W*T[-ARfJ-%;T]3gY,i`p&D0O4riQU')cZlIph]te_'ilACssf(P$s95%Xq@_5]"Gbe/oA)AI9hNYV.#Ka"e0Y4'n^79fLmYHNsGX!q$rQ8@Qr_%EHDI-98Hh1Z=sQ.J/3/5F3l+=&7ieF90-6ug`]&(V7;s*3*+f^3Xi`:"<8m1:6[GK[?QBN5bijKWf)PG"A-'^k:mg;?qPQ]&.(a+%TKRIK$'U0[KTqG\:YS'W2T1/''#kHX!JmH&W]t>6"_XiJ<Bt1:,"@TfQ?(>enH3JN5b(=h5l<S[S)t><--hkd[b3]2O;1>sL;W$+%O<t)A@Vh:r*<?F-O%+]*o4S-`]8iYD&8X&*rLfh";*hXaQLa.:-1j;<"X;6e$,GI])??-OgS>?r"Ka\u*>13$X&O6^9jjXXd`0)D%M4"FEcuX$qjk4W1!>o+&Z>&0Oc.9;$RgETiWXqDuP.qtm=A#*o6'%cI5hL'5'#l.FZmNgj-%n*f4*j_`#Z@fGO>`+Yhaof[4m4kZ%C)6)WFrZJCA&ltn=pJ:_MM5sRBD'&YkXd5"%"n@?oK4#q,0lqi_!$&#ZmOU;X!a3irF&3WM">:.<ZXJ0M3ejgU$'f3p2?JcOTQZ!%'?E)?+hbnh!dc67kRd.@Z3WN"YW.;/?'d.9d0PX4],r%Oc(GXa$'>f8$0)U5#8/Kg:+^2+2dA9q(llnr;bCa^48o@m/.s.:/1QV!%;]P;$4[0.j@k7cB&;a:Qh1;`?9%4%A6[2n-s3PR'#MFid:F&10=X8q2=WHq">\0W=&/1Os;&74ro3FQl;j"s7"WR371(AN]J](kk%lZgu!3`odn?._RHVlJ.NTtnb(YgF94<28:rVuQoYqT;\W4+doUU7SLS@jk?ckKk4PGh/"3qe?.$[qr@Vh5L,qDgF+^!=2E6TXBF<%66XjcX#Po5E'bCX)jE3_@,@EdCle4Vg4X2D*C_BS`<+0>ZgkBZ"O,k<^JPfsUWp((SP1jJ!Wn%+N?X[fQI:'Q9Rcc+J6;C32dI&I%*WF'V4((nToJc3/K#ZrnUZq-40Za+/e),6_XoX627j0;mEVc/Tq>BkD=H'!2TZ3%V,0H(7i=J,FM_Ti4A[1lMW6&ZWM(sf6:Oc;N%GkrA!VfYO=Q_47hdep:6mjq!C1Q_ldpmX$>*]kJq3-a`IDb(aM4o:4kf[4Uk-<+k&j\Rnj1aN9catn[(%-Dm<bMpW^$:LE^-=@TR%q9?];@Gh<4:_okdWt7BVNOU"?>)M?WackT`ID^]p?qCEs%b,K,#JUS4cOYJ7.ZXor5LYU\1'(g=&XlC\=Xgf0S^rHA^Bo]D:OZ5M%m,U*EVl2q%q3c+3;l+SUjiMEfo=*7JU,VH"[rDAe3r.$1RiI!eq"\P(B(PWJGj_aLB?6pHr2'b5NGG4[.=TpCX@YYsH2a4^H2P<5%?BZ'VhOZ3M+sU6T&t"TG_Yo[=iS])]m5P@(r3S@a6o@sS'\ugbe72_:A1<Q[K-MlZ&>e+_-8^sc8T:/4:Z4m*PUOJt(A3?l2V+:7%-JKK=cq2+LYQBJq=qsDC6I$#r97fHWggd-6#fMBj[3c3"e-#7Yb``;.@814p7=,Ao#cqPcJN9oJTRVPZ@"Ad[O4&(Mj!+pC1t$dD%A^;Z`^^51+YG*SepN4NG"@Vrg_YDd+ReZBqp*>^s^XBi5`O6bundE`-`(P^Z_9(,2H7U-fRte^:h55-UR3\;e%4<WpXMT/Z]f"qX%C[XVX`(Q7JNjb6+;ps1.%!enTPdT:]](bZW@PSn*NN/CSYc=jAeR(o^68m;4JEZg,RZNk6IE?8&S]\[ERb&L,Y:)jY)RJtU3Mq+-%$+gY=\-8s0-/[Hb3u@4BW/5^WeLg08Wd0#@1(GD'P!^((j&qqDo;'Rt!teul-Bs':IZ:*sM=usS+b@I1o1IQ<g8u2'[TW(`cZ"+3%KXbla[7r@9%e7l@,$i+)ZId"JJ"p&P2.EP:5iogtIhCX9R<!S*Z"V3>R<!!bF!g)%lsJm=GjUG`^YF8"](U7RDC0*#d9J0l7`-o]%Dm:"NHTLI'PaGsrmVo1+3m:F`pggCZ45BWqM9jZ<7fhjm)Z;5*f0Zc(6!FE<jM232-D"B%B;H)%eMO&;-N4m['E;L?!b!!"\I`P"%1(_u>ma\SoLfJQtK\nu2nj1&L8,<]2IZ"Trr#XG=aZr72=7>=&k]`Y-g(1++ZEFd]1/P*Zo>rHl"f?t=ou,dE*9A.\X7$oa54)l'%Nj78?J^CHb@sSjl2q`$sK"#h)%?.:G.`GP;WP-P&=\sJ\F2Y7kNp0P[,H7V4doEIn*H(@0<\Gs<Hp*[;;ne.JGB6/@-R*jOF%icH%'l9X$*qE]gUGCeiYK6AJ;;b=hW@W6S\qq<_(U3tf4fg7jZJ%IC/e4P4I;@J<]4dCM&W8G6(U8ap1OT>sEgOkFhS^VX=##fn>s2H*%W7/E6q,Ii.InTJJ.>?h'O]/uP77?TRNp0i.>aH[M-4hBX]3TnPX3ufXXPnIAHfuMV`pgn"q6\\qQt(F[_cS9hGc\%ZcX/mO?V&oi%.@(l]R^1,(,CUMg(gk9Z;e*)o>8BES7Xg2<0f1A@G[lZ&iOd`0pHH]&Q\ui4A[EecFbX1[=I8T>f/:JH_`UUH@Z9Hj)mQe*ATB>e%P8q&0;aBPnr&_gi9U;#A;\=`ss.1@W+t'Lu;PE2Me%L82T>CC'5])L7,"_E[GpgbI1hSmF*I(/$9Bg14#3f7$7L^_&*At35#FgJN%1=\K,Yf5a5U4$NENJ\snAOKrJKU28-LnUY\:Au9%LBB<^4FCOG$3jP6ftW.G>:,ONc?OU]n)((a[YartN*'b#.si)o&f[JG;m!q<%)f-Na4_&WkM3qBY(E3,gre[bpBL,[]&PI)1`Fi<PS95\)=tODgn&.V[a!djA+BS-2XPhmtrQqk7<046F!=Ls0_e23hr[JWd&I5_3%Y'_I$!d.nCLPWj$T*8^:hmH`k>=$1JE=mCg73'NX=-&\BE.e\#gI8bfrLT:s>:;uP,4:8FGf3RO4*#2Yq@9AH%Y%!,!_r'Vo-0"c%mS@"LRW<`i8!_<-""rVoWJmUHe:S>>T9J<WAK:+^U?E-Ym*k_<qlGa#eb6S/U',9l(L,KY5@?jk?&B6)erZ_&TdTr0)N#03`M"]Y%Br)ChJ*8Wq,1=Gqk,#Ym.#LD!aOEbFg7.G6MS0WLGD*qt./7@7e3[mP*Ap\6VC3<g$9(ep<`+1L,?$s,%STF_p0iGnZ.tLn!YGT/%c4Etkn[g!6*379(h.St<MufmrNY4%V"';@Y$+;Z;p:;^L(kjlBU5tGb?'jPJ!`GR4&uqkpM&^k/F2=/sB3<]/'Z-#8#6m&nq]]EB%&P_@M`7;ti@/6`r!Z7q4dcJK2VU6dmlPtmNj/t>(;-9n($X_LnPfIq;@Fh5(@@q9_@Zm]W]LIc5P85NuL5d+f';[p$*"%#k2UD%m%T7*L-.M)h&":4XW7J=%24=>*ff3.QE-2r_ie&pp_-Zo(T'*MFNM[)/L`UmYe7aba#/:3r$!"j8Y8!W'1bO!9%UkYUS<9OR.UJ8;C%81iB\XRrVRmRS#S=is-.<]P;UG.L#T_\IAj8)C2(r4n>Z_E+8Eeo^AM?1o[=m^i(;J%*id#)gLde.SXkCZ=eQ9A$!c^`-.'%14#5%Kg[l,MRr;na,Y@ma9\9[f$10*ZT2DcBBP.uT$%]eYEe3[OAa^]8rkjcHhWqDcOc"F<-9nij/1'3bHTYaa#Gio9^)Sh=8-.>ST7:1%c.Y\/9n=:gr/#PgRkQMi4+rn@[=+D_#tE:lN]h&fM>[j0"rPu@oK9L'-:sP\=I/H>pfiTF\REEG)7G?XaL3&'Onqf/Z=@]K)Z2d/%0idFfco(54VSrhECIOU9N"T^8&=roj18[^TbW%uf@KJl.0&,Q@gkLn@^s$@kBrnVIXj4X_j\R)>d/lbH"WU/R9//Le._dTJ2e+$W%,tI+TE?7@^QQl6##BW`$LZP5pM;J'aTm+M$`t42"@;B".J%PVf;R.e8!-/nVLn="G+Lo<;jYKrfe@FD'"c03$PaeKdOKR/$"Af_`%>a@O1re9P$;EmGiIZokLJE^<o&O`Gp82o`PM[p?`hE"[2-u:O@6ogs:WD.E5J9u-h<I=$H9_9\/QL<;0]<=PFoJqRg_Fk?[Ec!);%bW[@n2A@<tj`c%X'ZYmKN,i>G#oWb@Cf5:ImNum"W?7rMWEq.j5n_,#"$)2lZmd^0Q(sls:<=Z'c+]R<:'O/5aSkX&;4CF;KN(."%RS7mWlTV\%@Rt:/Dq:/br/?h!FV\:*-cSjX+Gcf[U!]!'Kf"hMjQPB&9no]a>YAfJ&%u3qoXr*6N##/RVV./IZr12-XOE:@+L=:*%RdfuAZTcA)-j1fN=Dk3r8=3L'iNXG5\b:]a)?gV_ED;3jY01[3>RJtfWq*Ju&lmU'LKH1=?mSQB`H%;$7imR7B]P%3s%2@WY6L8Q%VjrUjXNY5,?'%]UE6WM4VT,4=@+qi`a=UpEj`UplDE*i_HE!^<Th6Y6e#K?k.[_5KCZSJMmuue=?'j7Y>Vq"/9Q^okKfl%Z#LV<4%RkIe(0LP-m29E4n1s&u`CFY`k1Y-P:k!Q15al$4`l-L!"\WEC+mOE7D0AIto^!&,%<Pq-:a1I[9p\ZdnM7W3DF!26=@oG)k`EZ.+%0H)jRWfF]G(9Au]6_8/!g#4UgY=V)!m!Blio3iJ"9\-^5[3c_D60d%TGq,u2f@E[:>>lb"h,:ep7'/\kK(\^6fam]R</p%HaI.QM%U^tofKpXWi3MOPkh5CA608Vot;O<h^X<L"_O<n9Iki4P"q8^857NuW4(UA3g7JGY!I8,k=\_(i<,gM/V8n1]`8*IIN8;JuNkm#D/%MM<B\9nn=])^`k]:m9Pg_Y;8@(KtCHXQ<L3]mlZ2n\:MTf^.24J=35H(h\7bCoBrZ(_D.2=07ei1$`Dd`-M_8XZ.";H]j'u"p`H0%[UQ5u98XDI*&7%2Y\V?mVMTE1](e<HOmZtIdHa-NR7Q_,9W/TsOPd%"lsd[;Lm]n,N&0^A9lnHWN`50r$DSYkI/7-K*7D]<:7!;g%X8+LnB"e\@QnR]N4U-P6J"<1`N[qfBE*90;rWk5c#,F9dA!;Q\2cTpc_sJ$lo-Ig-qdR=9RANr,?Zo`#Z*6+u;Gg(<Uj;fO^C5qO%0*<Qp9,dTV`*>meFSg-LR,eIqa//@cN>^-J4o(fE:4--K;p*JlI]dc4ItVbsm>qaQVFo6nk&b#;j6q8X*_KGO,YF,"_j7GY*:Z:1%s5l-p+R)i@67Gb\Lg*R5eO])sms1/Sj#DFR^1j4TD'#9^kJZpi),s>@YJV"_Cb)fMEM?@JCRLBq3_iXp`8#G8'/pqnXnKb//7C98%&4udhe55^!.oh:9=l"0#0fRp>Bi7hY6@ebD'/pq\.84-\AL2"\lgR<;osLo(B]%Z,ide^a!AH04^r/kN`,p4K;bGEaf&;HTS&f+Y%4E=jGT4+?JfRZ"3Q,sD;Bf1E<A.pYjeO[<YCN<eadqU.5OQ;a%R#tFZT#cJTVE>(BV=r3Zn_Z]I2&r#RX5V\D>)f=Z/"[+b2s5Gr%+U<i;]sLa6)Afi8=2U/7]GcgpR@PuOi\%k^+R!:PFu*G6oQe\Kan:r(lsZED@j&TYbZfqPC)Ad\<FZ,X$mb0hbNQDaA$)gN+;l[S%@+8Z=PaGFfJ8(Ml!FeY1i\[-%,K%Rm4>en$0q[d^42R4#pRZe&+3X.9N$I6t4BeSb,O>H`28rrS&]_i+<Rqb%9Uo_Hm#L$4'$)R8%`rWH$j+)-fEMuDC"+2^iKIO[EAoNt9Mu8`4*YHFXaI!qkNZ2QpXR,50;Q;<4o-r[dC?N/RQC-mceoK].H<b8*iBk$VMoUSsNWW`6%`rVBkA#bBtX@EA)U8TnhcnVfANT1#l82!VX[U+1i8eJZd#9<p+*RJ_R55EO/:Bhgu,dHjAAT;Pl7Og/)YpE#\>0D01;^P>o9QQQ`%rF2b.Rb(Y?5U=YA^aL*Qe0GWAiHl?l(0Y:G6Hc4&HiH8Hf*8+XXiBrXY<`<[KU&AlD*BGb/(YQ/IH61e1?[`CQ')kJKI65.Jd?pr%RQ@9EP#sFF?O_O$oSsZ8ig2,51MZPMCH"Ua.'pu(<dJRR6<fNTaEI_V)QkOc42ErkR8H\FR)UOOObiDE$K9Q0/!oo+1;^(b:=UcF%pL1Lo!kg!4>e8h'L,)+a"!P>&/&+e"&.>m/YWe`HK<;<IB8Jhf%C$)<N2daMYn85[\kBDt?;OKe/ib7!PK;TW;eYsZ]h_Lm'iF)0%rS93CX-]Qprd\#)RT10VLhK#!Is8j"muHZ2*W0g::ji^V8h1`6hRHj$`VV`Y,erC:]-DcS0=IMLr>f"Oir-P5#&hKX45/'4WAbuM%M"D?6L$Sh;"8Ml`Lu7)7`qO]:i02.*2_U,A`\6QS*PZAGhVXIE`;6:dh]3$(h(W-0pth-!JFE;?m;.J#bZ64:e$F4IGJrt=_"cj]%]6YnU]$E(F^B<NLfDBnLNQ$PlQ]S_+=cRY7q(/q>*7T([2o)Wc#3kLqBk^6<=F>INYV/.ijnA\X:d3)T#sNmgWbRXL635SWY-r4m%X]&@(?!q"iQKfWfK536\NJigr1"9rYWRgN,g"08M.;cRpFR,Ig8e,;.N86Bc9qc-sSmsQkr=8G5o\?`Ma?5Pi>&#f<o\2&WKmHJ%%UY,=X^14:N;V#lhl/'2$Cs'/c+4UV>0qI$51$Lat+A;(1iu<hn=k,/X"hKap@SMUP?ob**CGjf;g\6;]=KB*![G5N.pWpdR-FP,:%N[po($Xgr;gq2r/JqU<_iirf#N+g(P,]qcpSQW-fBA^Je11H6K6J?7VkLR%:$-:I.lisM*eo\Z$,Jg<#d6/TP/9RN1]f'\D.%!qE%)6ZTFkAMnGA1!8LTIYT[;T,;31a]mA)s<:fHsi]6*Mr7mRO7:X0t#@^6/JOL9pV[l)R\BNP%\A&fMo!cCXU_n(Mi`XF!"EUX1gC:%`!,[+fOF;1Ep&7?m#otJe3shBO*!eSJ7#Q6%HZPH8S)gIC7tD'1#%CYIt<?bT9bacajW=!2QF9T.(>2@WEK)pdS%jE8&0tDCN2_"%GcqEuU].7GL!(TQXB09dl23dlEuhHUZ;+YkReVMc:18@-(oI"a;*snDT(WG\"92eI3fnLV&AJ#o"F[72-IdmSUiT6"=O0+]*,$-e%HhcunYBItQ)q$,3FBNq!6DPr^csJ,r]H/bUB/BImB^eKEcG"aPd&Oa4(cEMh9CDBZ%?^(g*^`N3N$O2k]@Zdk5,g:Yq4u0Eo1@Ku%c6lW`,G,[1J<Nd/eiTK<87Ct7;TQVeo1:)eq;d`+m3eN*CkJ"amX.oDh>*khGiY(:EVKs7'KmF>rJfd;I$hkp]JG;?L^El+F]ot)%ZFl\$*:kNY+27X2%OcNp2+I1f?$C1V1@EpW`OI:ddDeg._h?WPLd+2l=LiM5e9:#pWQ+r"Xn#B@noEp5WAcGR,ERa&=6R58j-4iP%`[Sook_qE+8m-)F,""]+%4cX?S6GC:37Z+FXAN:pRpBpe3;)komU/j/M3b2^!=-j+:*pWP3?^KuLg=(:&A.Eff2\c""(G6F!>?qj%+O$-\I0Lig.d7ce]H9FM;dKeARUf`"S:K^W;#u;_LIo"U;#q>rAKc'q<e3Vjp*c37OuQ?'La8@'kQ);LUsG`7I9t>6UB3V5cG'Dq%5=G\+X9:8&pIGk?^V]G1Ff`I/$A>$IWPVm'8230`J-d;OI?3rED"/G,:0?M#H308k.sqYk<tRLOJG95V^]lGCc*Z1^&I$u(W#-=)%5rA+#\:A8pkpX$kL3=2hE`eM:Tq4_)PsreG_?K9s2(mg;#o>:T3^mdbi;uIV(5nc(!C*`MO7('.XeVdoj;>0Yc.I[8gbXtaE&r:o%4[Z=u4(mr-H5];6+[*4Xa,lkZ-1'>ENhNcgFopGYL.pL/n*+QaouT1@Jn'U(.Z2WTJu+3c!5`FY+cpEhF:^9so),NKMAU>.'p;Q%%N+:B]Tia`@S8;`j&l(g:-]abKdZ<)DL!YUkRiWpo4(8o)#H#V]?lc9=3@"a.`'QjnH/#=F.S?$:q\bc_kkaA:PUrdh_.it/?o;=Y%YZg;iL*"VcI#bOSWtDEGku$VDX-pmiJ'Y>pnuH6$.35nOF!-,J91lVT5`#2igFCO#!9'IE.M$q-iH3jic[gW3LQgB'<#-8(.aNYK%`1@&;QokTTMOqMG9:Q8M&o]<gqgU[>7=1^T5sSGA!sscH#8/^RW,!'`R4?O6!+AX(C<qH-QYBR]3mraPlorY=>(g8tfYa^P#8/_9%%Km&-d8tVW"#ViD;75RPcpCK]pJO_^=.TL#Lcku`?t:RWRYV3d="IoiSpD5*_@]jclj[e:O8\s7.L+'&dH9ZS!/!._F<Xs,@#*aX%aj-6-+;HAmSM*]<RmKR]"DK0j1]o?T92c*$13'/TP#[JA?Q/+H!"DOVQ5O/B.78p>@%SYS:mje;<ej(7W05#Gj$C_?QK=Hkl^CFs%[Tc#@$&UFa9dYGb;G(_WSX5bm'L?r..a>2n>\Pn-N-HbdE3$8m>\Ra2)op>,-4O9X9U,f7W&=B_,#i812>6X9kB$V2X.Nlo1U7qO%p$ZERA_tORb4tKr`hQ'Mj,'Tle])A3a9*:j%crn5Vp%4?O!9^Fa%M,PhoL'?HQO6+.Wc3n:_:B6%rB?%9@-!Oce;b1J[;95aJ5i[%NDMS9W+.GDkd(IFJ.cJ[^b(khF1e'/;s)k5+DC;*9b(@"MTW1DiUs!7RBRakX&T$f8em2OYkrqo6p"NDGCh+N=s+k-Ekl,qLd)5i%[3?QL">*H:p$bj&L4?YfK`,>Hm@6ESp_r+OrQ]4JCW+tQdo3:u%U*hIg9V%i7R7D]'7"/h]_Y7Xe+G4g$c&n_1$U8d_kEr*bDAd>%Jn%6@@IT_ujnJb&MIUG%,3N$Na8CDCA>bI7&nZO?"I]NWgQgS,^Toqu=*>i5YBXO9F/tj%-sFSN;^fTV(Ns;4`,G!39,):1jA$Q^%`nlpnc.!mn+e:Y->Z.[#BH]dk:lrEIfH'K$Hc1Rl"n0$[(<+lWMuaO4KH!"%Q[$=P@1%#ZHZD:%Og*=UdfkWT;&6/bi[$]YEN.t@%lGldEOu[/6G";JM%P4lnVq6!a&YtEP#o;sq^hDltcAlV9G@Fh6Ve#UX4$+WSY-ZUjQ5I6?)\VT*Np3)Tj5*1Xk;taF=`*qkq"eNd%I$gWVb>A"L1WWW5R$5Z`-WY>Kk\BGSSsq;i"+73gUe@g+h+Df)JLQI3H,Eef'@e!uW<H2\aslsNLA4pS1DRHq_cek).U-[Oq\F*d%<Lc#i()ofAc3oLA7JUCK,V6BSa^V<NQg%ts-kns`YuP([[b;;<,!)<s2FZV?1X&l=DY#IFYScDLlFD.#Ksi9\PXPP\`TDt02IJXH%^9[H_k5%4lX>XH\c9.dJb&URgFbHXCI[i#979pU:.0X1KhSX(a,cioEFL>Q8or]\G79L8F_fEAmP"uaC`T:]6=BeB'(,7*<oC\t[%?bYG,.?B-i^>sqYbh&!jK#JJ&KOA+Yl+_Vbp"N%R$,PVY;aN0FECpN!CIniKiej4L"--6,q21[#5edtaq2/*;0OJfl#SpL3&q]q:%S%`Ik#f5MX1MknS_0dsd+]qui8dORURU6hJKOAfA.3Veu?:t4i%#[bR#f1o-.3Y(^,p`\P.o$Ad]T?kd^>M]:\K2'nI)-+4R'/Fp%"H2U5^.pjc&Yr3BW)]/j_>#pj(peAP[8daTcbKpjjb@>lh>I1&?X$9a08=#/:dQl-4#sYr::(e3irM^g0(b6EU>sYA=Kr.!BkLEF%6hmu9BHn5dZ-[:SA6$dr&4P;7+[X/#;G.Ee9#X0$PK?F..NYe,$Hp_nrWeX90rL*L.$=joMM[&m8.p]fddUW_p^6<H;2$,E5kbT_%"NqYrf`Y57*o9M'S26,B-<\NVW$kc5.o3sJ)%6]Ncj::?=AuE/0Vf0#AeErq\tcuQ@7]-na(pZ(Sqe+RP4^`FM*i"l0$-PCD-tuD%>.KM8Dq)KmRFGQCHQ5EUiJ1:AiSn13>HFkCP+bs/R"Zq^$BhId*BJu-DSPhT),DB/'J[oP^\t)J%@,Y>'3q'G@$ZuNZOo;H&ds^3%g4eh"67L.&SkGrWUGr`PGV!#6-b#=T'O!ug(RuZlCocRC.tpb@N5[*C3RP,E6K(SomT\j<7C+nk0qblQ:?5ttVUJ(qEok"g9d'q\%[_>7"YX5oZY3tfT&OL2KjJln\6tf3Lk]cA?'o8o"Vfr!s`<Y2X<,9jl8XRJ+5/0%NH;fm*[</H-6m$HXrp!AKR3dk5(fA:"mp.;?%eC6c50JXEq`UfB'1`%)Onn,;O#SFAYpjl6nmWW`&/*^S/[U4kq4!?qO.-%Tm:<@&<7Pi&EB5]'Jk#djX]?e%ehR:Gp!e$;=I'<b4%^PJt$ZFN^u<FJrb$sjj*lnPORF!!N^_G!)ALN]rlI[=/k+!2"&!6Y_SrIg'Eikc^2LlU_OEPas,b_RMQ#f6`PF4,0</LI?C#?8W+%8!m7u8QG)>We_Ai;mR12+Bin!TIS'M3a,_JXk8G\o2??/MGdl!nKfeqqDKR_YZe):9+3!b[/3,`@Ri0<3'%gW5hfut"u[^GFg6N:%IjpQuC?H^FD$(;O.A@AX>H>D@)R1W!"Jnles!=)ISRUsMRn_1P35HF$"G*<2f)3O2m%aC7;JJ<.HTs.T6[DbKr>;3p\YO6i_0@1S%SBAHbB^46^F)C[6T>LA3)MTNe)D9R5VdYU_-l6JU$rXdk[hGRk&<lB*!tiLuW?)emHAPn:=>(_0(MfE&mUElm-/Z[f$8HqHoM0Fe%.iYrA[Wfn<=(r?6l#o6&4Bu#aZ(<ldI\Yfj?pqQ@UV1]GZ<qY5F0'eMIS0:mLS)8VQm@]V5;=3&(M[@VMF(#CZ(e0n'@Mr]'=:N.%-6f3'Kpn)8Kpns"l7(6$eO/dda/3`3U7O^M.#T/_l7P#R.+EUE-DhZI$IC/[FUC!74UQ<s7&UEkVbe%m:8%l(gHGp$+[$)g!U1;5%,(AgT:_Rm_3>3X'\"JeO#S_P9l,6adKpj^OR7ZaqE)_FH-BM/VRF?ut,K`Gp&[l%%92)FXXe@)kk[mOJTl0FApkeMH7A8R?4b^Jh%CXk&e[KVH;2dogHX`)((m8=D2Nmo[Zh1VXR8p*XFDBk-rKBfR7G@CCP@h-ss\Jt=Z39,B2R0ZmE_2CdbXu9/!?/HJ`+VIGu-CtUE%.3P(k*\kr"pR5V`_tV$`>H=i)BXuW7n)$Xa=]3fQfp@3*$>eo%8P.3JEVM9c%kjQ*&XQ>/m2WrtA(;a)qhtQk-P@M:!P:;:fg1cH%+2G%$d9Bhj38k#:/E6F!92)":\/!AG"51T7L57?)LDWPt@q[C2N_(3Z;o4J!j18dY$GWAq7q1RrimT4[j\cilO.,qAV"pY@E?rC@%EJ'>Zp73='!2(,AksuJmK'DtA*[04<"_!uCVE+6GYiLTjArf<98E%A7[k@cG\0TR7O\2,pSuN(.L)7KWS!'f8oK4u#,k6F/@>g0(%mPuf,dkG&Qag>#%Ro0XH!,KSSZuZsfbZq0h"'A"C,*4(qL5\9dJ!SUa=*QAl777u$3su@MW;@3\M*t6a^P1*qUaFJY<[aouS.,oQ%Mu#V_1U08#3E$D8(m1[T!0`L0aTTNU;RF&JiP#rpj(*.4drX;%!<1!O61@anN46^p`N3$%R-LM\Hj-iS9r5Mmo;=4@Ldt+Vl?/HM%&!M<Vkn%o2C9j&*Y^Hp(8]-HrVj+uPhpNr"6_`\T<7crXMk<QK#_IC_j3=jQfcGf[!0iU%Yo4ZRD@-8E/1'SC=<jqp'Xc#PC^.^'%Qrto*.',*:pRIY!9"-lbd7`$KYjR;1-!grNia&8Z@!i>Qib.oYG?sr$b.9IGja6983\1=pdaiFi[J[>bGnp+%d[M+]+/enOe2Bjh%Mt%AI7!'`\.bJOT[L,3P`MEi;i_qBOhLD*2I=`4)"=XXUdd,7)k!s%7[*NAe3&80ccS4V<LBk!()'/@LL^B8@AHgX!VHhriB9YZ$%GLf['1KlpK(a4u._W#(UkX",KF.LHWA;*@FV4r=g5"l2<AQ<VJ+OODq##Rd9'kSH.o(:3<[FL!Tl5FhTV4'emHVKC]kEq1nN;*%7%Ya?@FZ[GU]@K)s$Gq&-=<HRPs-1^LXfLB9)%N+#&#uMcgmDn(#6+@e8mo!%uW_Qq:"iRu8KB@+Z!Dul:b?ffQG$>M!Aldom;"orE%._>BB;\V?\fFh1?@_*a1gNVO=0N!uhkBdgV&Sl2O8S+(3H%p$T/C]sGSd\]p7GR(ubp@O5_EuGa_]"W=8+1N^jXmi(mR0_?^LpZY%iH]jt0PU!2R9'#fd,f3o$f$*I^o,YL1IfZ]#(:>B'+j&3"CZ`uG&:HW`,F3@QlZ&4^u4AHa=FVnI_$+7rMoS[@l="$@\#*lN?44[%`R<Ed61&4KRNTh:,Y!MbC0Ye[V9l"?U&U84?$^!lmj0YdBo1*#R!Oe"PXan_iJ&sQ@u$D3OJ,N7TNuL>Ss7IS=,ojA"qZt8hLP++%0(NKBXc;mLd,F#e$V4?cj]7ABbA)2Elnr6<*`ZaB@4GGU5$$_bFks0e:i#80Sp)k2C<WccY(0KV3_Bd83#>/!383//&_<uMJ5@t7%*$1HO5V"tI=E6h'>00coAt`:ia>SR5?I!/TSbq9XVd!JR_2W^>)iOkPJ+J`9qtkm>LVNlf9:fA<ruW3Z07IdE%_I:^KUf>m1q2%=%2hi@I_Bja1J+/s=]$Fp\a-,&$@)G<=N!$:>EnH@]SXir')NMA;M,D*[ML_E!\PZs(hY9O9/cD@WSuR@&R;.<eIWj!;)c3[-76rAI%70A)rUPXci)u7k%q`2GSF4!?(=ul?tpV#mHSYpfU%7/Grk/m<p#YbE]g&MQf\`XEqA>c0,I>eoN8M6#[WeaOj7G_VF@4Cca'K]c\%fQpr]Xb;HkpA`WX[hC.6KlAe719Nq`&`jiNbGKdn8\H'GfS&52-%Rf3NF0HT20bfID`"/^OY.,),81PN7i=N(B8>i1OVU07oo3J?%TQ(LREZkg,808$E*W,h/9q^Z=%='2%l^Fl-;KttD2aZ"^+U.M.#r7>B>n&H8F(F4"O9+Wu$Z=gdRBHU-Vbm8@/:R-^m>GJA)Pe"o%ZT=L$C[sPGNsjt5Q_2o9"5ibO\'$tI`J9>KFWcd1%Ks6^#Ss[5nhlm=qDi^:13@Lu.r)U+ehj$7_duO0U59ZPhHf5@lh,qAB-a]i%bt=5U\ZP++`tk4#is=\V7ks%1$F^]P`F+@CQT?Ya1bk.;p%:t2)B9!&QN^1>JG+jXp5NjCZA)5[,Os$+D[qbg"P,fC6f@ZU#THdQ%UsDjEScea<0j?f;)%^(Cia3geZCWP0UEf(2F3senqoshZ1dfn,5_f&1$8HI?nD*]V(NZB*@Pa]#nLt4kKB.re"+.be\_msco:@dT%/pi0sdmSC0-//W,B=;7]2]&iJ+5C:G+o_dR+%5K&Y=:[t*(f/HHTGt#R(p9\4^cdX"[a+hEV-!qj@Q3bYl6:'It96l9dTBAZ?A;7%7M,i9$-WO).E"[f7N'M>V#YjM*N?o=,R\mr1b&')&U%V[Et-RVjDF9iN7nI>KASP$aM,K`;-*Pt;'L=:Mgn;N2kku!EQe]Igl(>+%7)qW4IKA1B3,[$,U,0rbX`S>MM6aF%,tWf!ii;c"\:$&BfZ>$k<kiY>338Za7Rt[!9mRF`m$E(Pr!.XkjskB^Jp9W?W@&tY\bdld%,UH*&b8TR3,d7a)\t47Or^#CBYFR@fdCjSG'.CMDj]R?1M5[u4>'^S^KJGFTN_WG8Iisc>G0pi^6Lp,7>Y%-][]e?Y@:g0'+`4]M%J!mL)?%eS<KANOgYf`(iphED;%sMX+kob<60):B_2Hj!J1#+u*b9:RQ=CG$'h]m6JcHcnu)-<<*Ql^paiO@,eh)Y;?j=PY7H.R!a%Dt?TI0bC6mAE.U#@FDR8h;<Vq_GDT_SrT$p\FuJ<FNAb`/j(5J.8l(k\$$$qm^E!.i!U,G3KUleUJ",T/SL:1\<$;/:0+[/TTMo@%PM*j1=t+._S],3h)1/XET5,S?\c]S*%+*nG5,n"9Q-tRS<]M&TRe@dVD]86;ZkFAEV&Xa/7.q6s]_R3r&Z!BQJjY2qrWJ-h[.r)B%'LT&/3N[fDOkkQt-8[o84(KL&C`g:Tr8gEA\b@*8?iEI:O5@L)o&SGpMFt?)/6rU^H&>n'!-DAhfFjcB0K9FbMZ*)`ep*8(blM"j%;p7a^Lih?L.*<kP:_>.d,d6W!5iL=S@m6MoEQUB3Z%d\%F,Y!5L&i`o'J#\B82)o3CKPTl$lFS&k+knnnOK>\1L5^r!BLMuS-gAV%$.&ik1,jc,-?u"/LEDe6(_m=i$5!h;27KDV:omp$`.g2<'d;Ka[%ZG:be6/!p5La]/HV[I1ICRP$<Am8MUK`fVoo5Q6HF\--%^G1%?kZ3B7:cWYL-[2Q+%*d-^1/rZR=tU2Ar'K<@GJ5Y8;%,@%aY5P>2r-c=\Sh3D.=""D!ZmU;_Q=\"\Ai'">Jo;2_2&%>>+"2<eS[L%DJ1_V6DY4`W)+0urFH\`HYrNl'J&bNP(`1K'n*tRNU?s*\N2bTM$jI!Q\I2F#%dgf;O&[M:_=o%j59Jcj&[FrTP',kq\Cm\c_1^H%)7krmd4;Rh&8#Zcjk!.Fn,i9YX;h6)Y5Bd@R6j31?HiXsT+jMe#W$(/otJ@BeeREA<)_c*Dj'+e8-gmT4M$,m40c^K?MS$S6.&PF%`AS"=9rE:,68iu5&Q=.(SD^TV!J5].aE6[,%sH9FDQ-Gt>(=>&]1uo<Zn#Mt^L;9A%OlW?OkOh`q_UeI_kR86p'WuP*>Ji6C#mYO%AH<X4qZH0NeqjaP6[`sfiTcWTWB_:9<`_q7>DQAn+_mMp,ERcp=\0hRIp,i>IY*8NJsco_*!^Y,-6;JAQ[IiQkH'4$/YsQAETf>i%2oG3"Bb4bc;;4$9=*[ZS0h&"*Yc9sk^ZIZ0*\uL7`oj0&e$d\pA?:8J&1iKHF)JEoP=`'YVCoLOb_*Yh#B.aQBZ>>GgaJ\&NUk(A%Yn^Q]WY,lSG]NqT@0hb,4U`>8l^TUPFAFb>?"m$@5qCHQFH2APb3pBF,;Cg"\E,78%;a2pI>^q^+:^^BoJYGoCj<j8K.QL9T9E.Y%Z<JMZXlbF]E1Kf#SR@'l_$!*@4@&*F'Zqe!Z6quRjmJ"PM3)#7\jV9;`,oF+#='(:Coo5P+=1$+B'-gi[/#i7WN:,Yd=VP^YV!iS%L%kodDrb,2NJNIlDI^A9DPTLGVgM%X(_7A(F0L+h3T;E;A%I"j9fDJ6]c\:XYm2Y@8n.)WRLBM[1X'%!20mC6rA,b?>9Y9]c8jm$%`hQ25`r1.',dbKD4XdEZ>L2.=?hHSHFk953B);om)05@S0Pcs)j=S.@mq^RVHY<?!W4+`u_[-KfbrD5GPF)jUP8'Qa$AOgG9Q>o=%X5_PT?i$PW@[JSsPX7Kn!O<Jo@I.eA%]/4mpb7Y]KOH^]L/DaW@FXb"h#uugrJJ4DpI99A6KCC5h5)cR&j5G3&S'Xn$]A@o%b?B=%BQS.)Pg,gPRenY"<H;@Br+\?l#=8X\WG37c%T`IDd#9(3,L%(iRs5erl:6lF#!]D#"s1!fr>fqWH&h_!f73Z+oD@uiH;$N?_C/q)%%Xa.&KaUX!^.:db\AM<(EU0-'@9==9R68O,Do#4u[HCY.i4*-8IL7,9`)f<.fmT6kFoO)A*CXckAi(Vrij?Lh<HSYfMJp8gVj-O`%?Tg)]ZF;Hn)(3oRr#SZsU%%&g06,/919VHO01UE+4/PZhC9hD]h[>?ZJmKqIS&1ChJ5DFQiHp;^X0a3lq7V9$6?u6%KUOT.*nM_]%3N]NB3>,M)Qu7^\PAQcF'&Qk?*`#>3:hTLi:lup[F,!hmU`saO]m'!o>-JFbF8&djM#j>m3T^\NNocGqF"HZ!9*dPMA%m<bDkCGj%_:IaYeZG^\US"oRWE:^blBt`sRB4`-KQ4:6O_f\K@9V8Fs43C";UoMAID5s0:>,k1>?YI4]`g"u$`?b4V#\Sl3&opWi0]CS<b12t%?OQ&`69JbGZ'=oMcWMB<s6t)Q9b'^TkA8*3SAf1$"V4tih?I?`.pTrfPg,dPrJ*C65;^'n)pVSsY1;"??r3)&rFIs"+)8\Bb@tJ<%M!LkAdIB2(-kiZ;5Ff^9+0kd./%>,ZM6lhlod-oM_n82n3,<#lD=iS]`6[+8W'hVZcMSEtQPGEcdGOd[4P%R50M^Bo]0ij;ac)*Q%1"QNk;=/J5mpKRH;\fSsY2]4<B)<,0!/PmX.H^L<B:n8U*R+5LnCqSXBQY!eq'kI$T<cBd4N!nZ!sa6Yl-LIl$fdZ[ZgpQo*jMd:%?!YZ:KOm%>YaNP:o=#]RnI1>X?C^.t@,o9Q'-^HuJsoeC`6.,m0u`dtL?rP@<l=A/M^b3Y=%Co8^`H+Rs#c!#Wf[qu,uee8nb,eP%G$SOoU$$pI'B7aZ"iObj`DYW+,AU9YEIa6$+LVpgCiO!tf;+1ZJ'X/sC*uRE6`DCB%%IJ]EK%;-f_1k*U,".iQ%<iS^o6;Y%]#C&%Y&iRfG3n,nhmB,\_G;,o6.Z[K&<P7C_`G=L]coU:_Vj.YK1:^\ek0X4Z&T1#>NW&-*rB$%Q-KsLEH,*>7M&,.U+knO_e/X>+)Q1G%/EAcZh?+O/KQ<^2-%eJ;-H7cGK"sjZ`tC3[rYCHCm3rbG#*7`UD(f&BP->"/cp)XV)Kr3tdQ(\gDR,;uL.X+mT$!^9@7)W@KKR;&%6hT>#_gFg'nc8Q./<!82;O+04Z,n1k$E;(Na,Yl1_-o>#F"Hsdb!W\bZ-YT0m5)t57i^G=I0U.n)rsnH6uMGR7XR#G)"o<^b^YX\%qO-Vi/BB,(?d`dG&Z'g]@ap42^B]P",OSA<QoL?+ji/>]b,CdSr61j^5iPV;+4_,Gb(Qi/*6J::L[p"Y6THtq*6NrAH8q.YOp2,G%1,+$je/ZVaeD^sL!n<;^%V<M_\DlFCDT%C1Z@XOCTJp(.d@hPWdQG\E2C,mIbbIjA7NmkNd:Xp):Hci$0orVMl;7aP("g[Ep\Kh1%`n/S?Y^RYI)LPf^XCE%;XLNW`,<*-DI-@QM'HK:FiCDrY$ATN>CbrY,)dZ^@.9)Xp,OY+/R(.N?'4pKsb6Q+gid_T4O1.`054iN!%&mH7LHidb@T7DdEV^]m).j*ssaC:p%Jeoglpd7Z1XK'_S5[nf83dp3n'R+1bT)a_sLPDI\G`:AWLLV;V>2?6Ue6k0jF8?$XS3?re%V[j>27lI7U^/rupCL/*iMWe-llU(YjM<snLqCG))qD<V._V@=?aLH/g(2!.VLFn&6jm4dhR`m*d?6;\3fB7JUhd7eT+AoG\?LO1r%nFbC?^V0QkhgYRjbN,IOJ,Z_Wn`<!MZsG')Fp_7)4$EG\7#d);Iec38?N9H:&&8!Km9b>BVgj-nq6.R2p:#PKjbFrWn`N.9nk[%!%r9rNlq<c?Is8;J<r:9FMTDnKK?[i!t0E5tjbKCuWqrQ.Rq=V4(?N0k@^]#UBr=^d^_[jN^LS)<Y2]cfV3<~>%AI9_PrivateDataEnd